Index: app/src/main/java/com/regin/reginald/vehicleanddrivers/Aariyan/Database/DatabaseAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.regin.reginald.vehicleanddrivers.Aariyan.Database;\r\n\r\nimport android.annotation.SuppressLint;\r\nimport android.content.ContentValues;\r\nimport android.content.Context;\r\nimport android.database.Cursor;\r\nimport android.database.sqlite.SQLiteDatabase;\r\nimport android.database.sqlite.SQLiteOpenHelper;\r\n\r\nimport androidx.annotation.Nullable;\r\n\r\nimport com.regin.reginald.model.OrderLines;\r\nimport com.regin.reginald.vehicleanddrivers.Aariyan.Model.IpModel;\r\nimport com.regin.reginald.vehicleanddrivers.Aariyan.Model.OrderLinesModel;\r\nimport com.regin.reginald.vehicleanddrivers.Aariyan.Model.OrderModel;\r\nimport com.regin.reginald.vehicleanddrivers.Aariyan.Model.OrderTypeModel;\r\nimport com.regin.reginald.vehicleanddrivers.Aariyan.Model.RouteModel;\r\nimport com.regin.reginald.vehicleanddrivers.Aariyan.Model.WareHousesModel;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class DatabaseAdapter {\r\n    DatabaseHelper helper;\r\n\r\n\r\n    public DatabaseAdapter(Context context) {\r\n        helper = new DatabaseHelper(context);\r\n    }\r\n\r\n\r\n    /**\r\n     * INSERT Database\r\n     */\r\n    //Insert Server:\r\n    public long insertServer(String serverIp, String emailAddress, String companyName, String deviceId, String regKey) {\r\n\r\n        SQLiteDatabase database = helper.getWritableDatabase();\r\n\r\n        ContentValues contentValues = new ContentValues();\r\n        contentValues.put(DatabaseHelper.serverIP, serverIp);\r\n        contentValues.put(DatabaseHelper.emailId, emailAddress);\r\n        contentValues.put(DatabaseHelper.companyName, companyName);\r\n        contentValues.put(DatabaseHelper.deviceId, deviceId);\r\n        contentValues.put(DatabaseHelper.regKey, regKey);\r\n\r\n        long id = database.insert(DatabaseHelper.SERVER_IP_TABLE_NAME, null, contentValues);\r\n        return id;\r\n    }\r\n\r\n    //Insert ROUTES:\r\n    public long insertRoutes(int routeId, String routeName) {\r\n\r\n        SQLiteDatabase database = helper.getWritableDatabase();\r\n\r\n        ContentValues contentValues = new ContentValues();\r\n        contentValues.put(DatabaseHelper.ROUTE_ID, routeId);\r\n        contentValues.put(DatabaseHelper.ROUTE_NAME, routeName);\r\n\r\n        long id = database.insert(DatabaseHelper.ROUTE_TABLE_NAME, null, contentValues);\r\n        return id;\r\n    }\r\n\r\n    //Insert ORDER_TYPE:\r\n    public long insertOrderTypes(int orderID, String orderType) {\r\n\r\n        SQLiteDatabase database = helper.getWritableDatabase();\r\n\r\n        ContentValues contentValues = new ContentValues();\r\n        contentValues.put(DatabaseHelper.ORDER_TYPE_ID, orderID);\r\n        contentValues.put(DatabaseHelper.ORDER_TYPE, orderType);\r\n\r\n        long id = database.insert(DatabaseHelper.ORDER_TYPE_TABLE_NAME, null, contentValues);\r\n        return id;\r\n    }\r\n\r\n    //Insert WAREHOUSE:\r\n    public long insertWareHouses(String wareHouseId, String wareHouses) {\r\n\r\n        SQLiteDatabase database = helper.getWritableDatabase();\r\n\r\n        ContentValues contentValues = new ContentValues();\r\n        contentValues.put(DatabaseHelper.WareHouseId, wareHouseId);\r\n        contentValues.put(DatabaseHelper.WareHouse, wareHouses);\r\n\r\n        long id = database.insert(DatabaseHelper.WAREHOUSE_TABLE_NAME, null, contentValues);\r\n        return id;\r\n    }\r\n\r\n    //Insert Orders\r\n    public long insertOrders(OrderModel model) {\r\n        SQLiteDatabase database = helper.getWritableDatabase();\r\n\r\n        ContentValues contentValues = new ContentValues();\r\n        contentValues.put(DatabaseHelper.orderId, model.getOrderId());\r\n        contentValues.put(DatabaseHelper.invoiceNo, model.getInvoiceNo());\r\n        contentValues.put(DatabaseHelper.customerPastelCode, model.getCustomerPastelCode());\r\n        contentValues.put(DatabaseHelper.storeName, model.getStoreName());\r\n        contentValues.put(DatabaseHelper.deliveryDate, model.getDeliveryDate());\r\n        contentValues.put(DatabaseHelper.latitude, model.getLatitude());\r\n        contentValues.put(DatabaseHelper.longitude, model.getLongitude());\r\n        contentValues.put(DatabaseHelper.orderValueExc, model.getOrderValueExc());\r\n        contentValues.put(DatabaseHelper.orderValueInc, model.getOrderValueInc());\r\n        contentValues.put(DatabaseHelper.deliveryAddress, model.getDeliveryAddress());\r\n        contentValues.put(DatabaseHelper.user, model.getUser());\r\n        contentValues.put(DatabaseHelper.orderMass, model.getOrderMass());\r\n        contentValues.put(DatabaseHelper.uploaded, model.getUploaded());\r\n        contentValues.put(DatabaseHelper.cashPaid, model.getCashPaid());\r\n        contentValues.put(DatabaseHelper.offloaded, model.getOffloaded());\r\n        contentValues.put(DatabaseHelper.strEmailCustomer, model.getStrEmailCustomer());\r\n        contentValues.put(DatabaseHelper.strCashsignature, model.getStrCashsignature());\r\n        contentValues.put(DatabaseHelper.invTotIncl, model.getInvTotIncl());\r\n        contentValues.put(DatabaseHelper.startTripTime, model.getStartTripTime());\r\n        contentValues.put(DatabaseHelper.endTripTime, model.getEndTripTime());\r\n        contentValues.put(DatabaseHelper.deliverySeq, model.getDeliverySeq());\r\n        contentValues.put(DatabaseHelper.strCoordinateStart, model.getStrCoordinateStart());\r\n        contentValues.put(DatabaseHelper.driverName, model.getDriverName());\r\n        contentValues.put(DatabaseHelper.driverEmail, model.getDriverEmail());\r\n        contentValues.put(DatabaseHelper.driverPassword, model.getDriverPassword());\r\n        contentValues.put(DatabaseHelper.strCustomerSignedBy, model.getStrCustomerSignedBy());\r\n        contentValues.put(DatabaseHelper.threshold, model.getThreshold());\r\n\r\n        long id = database.insert(DatabaseHelper.ORDERS_TABLE_NAME, null, contentValues);\r\n        return id;\r\n    }\r\n\r\n    //Insert OrdersLines\r\n    public long insertOrderLines(OrderLinesModel model) {\r\n        SQLiteDatabase database = helper.getWritableDatabase();\r\n\r\n        ContentValues contentValues = new ContentValues();\r\n        contentValues.put(DatabaseHelper.orderId, model.getOrderId());\r\n        contentValues.put(DatabaseHelper.invoiceNo, model.getInvoiceNo());\r\n        contentValues.put(DatabaseHelper.customerPastelCode, model.getCustomerPastelCode());\r\n        contentValues.put(DatabaseHelper.storeName, model.getStoreName());\r\n        contentValues.put(DatabaseHelper.deliveryDate, model.getDeliveryDate());\r\n        contentValues.put(DatabaseHelper.latitude, model.getLatitude());\r\n        contentValues.put(DatabaseHelper.longitude, model.getLongitude());\r\n        contentValues.put(DatabaseHelper.orderValueExc, model.getOrderValueExc());\r\n        contentValues.put(DatabaseHelper.orderValueInc, model.getOrderValueInc());\r\n        contentValues.put(DatabaseHelper.deliveryAddress, model.getDeliveryAddress());\r\n        contentValues.put(DatabaseHelper.user, model.getUser());\r\n        contentValues.put(DatabaseHelper.orderMass, model.getOrderMass());\r\n        contentValues.put(DatabaseHelper.productId, model.getProductId());\r\n        contentValues.put(DatabaseHelper.qty, model.getQty());\r\n        contentValues.put(DatabaseHelper.price, model.getPrice());\r\n        contentValues.put(DatabaseHelper.pastelDescription, model.getPastelDescription());\r\n        contentValues.put(DatabaseHelper.pastelCode, model.getPastelCode());\r\n        contentValues.put(DatabaseHelper.orderDetailId, model.getOrderDetailId());\r\n        contentValues.put(DatabaseHelper.comment, model.getComment());\r\n        contentValues.put(DatabaseHelper.returnQty, model.getReturnQty());\r\n        contentValues.put(DatabaseHelper.offLoadComment, model.getOffLoadComment());\r\n        contentValues.put(DatabaseHelper.blnoffloaded, model.getBlnoffloaded());\r\n        contentValues.put(DatabaseHelper.strCustomerReason, model.getStrCustomerReason());\r\n        contentValues.put(DatabaseHelper.intWareHouseId, model.getIntWareHouseId());\r\n        contentValues.put(DatabaseHelper.wareHouseName, model.getWareHouseName());\r\n\r\n\r\n        long id = database.insert(DatabaseHelper.ORDERS_LINES_TABLE_NAME, null, contentValues);\r\n        return id;\r\n    }\r\n\r\n\r\n    /**\r\n     * READ Database\r\n     */\r\n\r\n    //get Personalized IP saved on local storage:\r\n    public List<IpModel> getServerIpModel() {\r\n\r\n        List<IpModel> list = new ArrayList<>();\r\n\r\n        SQLiteDatabase database = helper.getWritableDatabase();\r\n        String[] columns = {DatabaseHelper.UID, DatabaseHelper.serverIP, DatabaseHelper.emailId,\r\n                DatabaseHelper.companyName, DatabaseHelper.deviceId, DatabaseHelper.regKey\r\n        };\r\n        // Cursor cursor = database.query(DatabaseHelper.PLAN_TABLE_NAME, columns, selection, args, null, null, null);\r\n        Cursor cursor = database.query(DatabaseHelper.SERVER_IP_TABLE_NAME, columns, null, null, null, null, null);\r\n        while (cursor.moveToNext()) {\r\n            IpModel model = new IpModel(\r\n                    cursor.getString(1),\r\n                    cursor.getString(2),\r\n                    cursor.getString(3),\r\n                    cursor.getString(4),\r\n                    cursor.getString(5)\r\n            );\r\n            list.add(model);\r\n        }\r\n        return list;\r\n    }\r\n\r\n    //get WareHouses:\r\n    public List<WareHousesModel> getWareHouses() {\r\n\r\n        List<WareHousesModel> list = new ArrayList<>();\r\n\r\n        SQLiteDatabase database = helper.getWritableDatabase();\r\n        String[] columns = {DatabaseHelper.UID, DatabaseHelper.WareHouseId, DatabaseHelper.WareHouse};\r\n        // Cursor cursor = database.query(DatabaseHelper.PLAN_TABLE_NAME, columns, selection, args, null, null, null);\r\n        Cursor cursor = database.query(DatabaseHelper.WAREHOUSE_TABLE_NAME, columns, null, null, null, null, null);\r\n        while (cursor.moveToNext()) {\r\n            WareHousesModel model = new WareHousesModel(\r\n                    cursor.getString(1),\r\n                    cursor.getString(2)\r\n            );\r\n            list.add(model);\r\n        }\r\n        return list;\r\n    }\r\n\r\n\r\n    //get Routes saved on local storage:\r\n    public List<RouteModel> getRoutes() {\r\n\r\n        List<RouteModel> list = new ArrayList<>();\r\n\r\n        SQLiteDatabase database = helper.getWritableDatabase();\r\n        String[] columns = {DatabaseHelper.UID, DatabaseHelper.ROUTE_ID, DatabaseHelper.ROUTE_NAME};\r\n        // Cursor cursor = database.query(DatabaseHelper.PLAN_TABLE_NAME, columns, selection, args, null, null, null);\r\n        Cursor cursor = database.query(DatabaseHelper.ROUTE_TABLE_NAME, columns, null, null, null, null, null);\r\n        while (cursor.moveToNext()) {\r\n            RouteModel model = new RouteModel(\r\n                    cursor.getInt(1),\r\n                    cursor.getString(2)\r\n            );\r\n            list.add(model);\r\n        }\r\n        return list;\r\n    }\r\n\r\n    //get Order Types saved on local storage:\r\n    public List<OrderTypeModel> getOrderTypes() {\r\n\r\n        List<OrderTypeModel> list = new ArrayList<>();\r\n\r\n        SQLiteDatabase database = helper.getWritableDatabase();\r\n        String[] columns = {DatabaseHelper.UID, DatabaseHelper.ORDER_TYPE_ID, DatabaseHelper.ORDER_TYPE};\r\n        // Cursor cursor = database.query(DatabaseHelper.PLAN_TABLE_NAME, columns, selection, args, null, null, null);\r\n        Cursor cursor = database.query(DatabaseHelper.ORDER_TYPE_TABLE_NAME, columns, null, null, null, null, null);\r\n        while (cursor.moveToNext()) {\r\n            OrderTypeModel model = new OrderTypeModel(\r\n                    cursor.getInt(1),\r\n                    cursor.getString(2)\r\n            );\r\n            list.add(model);\r\n        }\r\n        return list;\r\n    }\r\n\r\n    //get Orders:\r\n    public List<OrderModel> getOrders() {\r\n\r\n        List<OrderModel> list = new ArrayList<>();\r\n\r\n        SQLiteDatabase database = helper.getWritableDatabase();\r\n        String[] columns = {DatabaseHelper.UID,\r\n                DatabaseHelper.orderId,\r\n                DatabaseHelper.invoiceNo,\r\n                DatabaseHelper.customerPastelCode,\r\n                DatabaseHelper.storeName,\r\n                DatabaseHelper.deliveryDate,\r\n                DatabaseHelper.latitude,\r\n                DatabaseHelper.longitude,\r\n                DatabaseHelper.orderValueExc,\r\n                DatabaseHelper.orderValueInc,\r\n                DatabaseHelper.deliveryAddress,\r\n                DatabaseHelper.user,\r\n                DatabaseHelper.orderMass,\r\n                DatabaseHelper.uploaded,\r\n                DatabaseHelper.cashPaid,\r\n                DatabaseHelper.offloaded,\r\n                DatabaseHelper.strEmailCustomer,\r\n                DatabaseHelper.strCashsignature,\r\n                DatabaseHelper.invTotIncl,\r\n                DatabaseHelper.startTripTime,\r\n                DatabaseHelper.endTripTime,\r\n                DatabaseHelper.deliverySeq,\r\n                DatabaseHelper.strCoordinateStart,\r\n                DatabaseHelper.driverName,\r\n                DatabaseHelper.driverEmail,\r\n                DatabaseHelper.driverPassword,\r\n                DatabaseHelper.strCustomerSignedBy,\r\n                DatabaseHelper.threshold,\r\n        };\r\n        // Cursor cursor = database.query(DatabaseHelper.PLAN_TABLE_NAME, columns, selection, args, null, null, null);\r\n        Cursor cursor = database.query(DatabaseHelper.ORDERS_TABLE_NAME, columns, null, null, null, null, null);\r\n        while (cursor.moveToNext()) {\r\n            OrderModel model = new OrderModel(\r\n                    cursor.getInt(1),\r\n                    cursor.getString(2),\r\n                    cursor.getString(3),\r\n                    cursor.getString(4),\r\n                    cursor.getString(5),\r\n                    cursor.getInt(6),\r\n                    cursor.getInt(7),\r\n                    cursor.getString(8),\r\n                    cursor.getString(9),\r\n                    cursor.getString(10),\r\n                    cursor.getString(11),\r\n                    cursor.getString(12),\r\n                    cursor.getInt(13),\r\n                    cursor.getString(14),\r\n                    cursor.getInt(15),\r\n                    cursor.getString(16),\r\n                    cursor.getString(17),\r\n                    cursor.getString(18),\r\n                    cursor.getString(19),\r\n                    cursor.getString(20),\r\n                    cursor.getInt(21),\r\n                    cursor.getString(22),\r\n                    cursor.getString(23),\r\n                    cursor.getString(24),\r\n                    cursor.getString(25),\r\n                    cursor.getString(26),\r\n                    cursor.getString(27)\r\n            );\r\n            list.add(model);\r\n        }\r\n        return list;\r\n    }\r\n\r\n    //get Orders By Invoice:\r\n    public List<OrderModel> getOrdersByInvoice(String invoice) {\r\n\r\n        List<OrderModel> list = new ArrayList<>();\r\n\r\n        SQLiteDatabase database = helper.getWritableDatabase();\r\n        String[] columns = {DatabaseHelper.UID,\r\n                DatabaseHelper.orderId,\r\n                DatabaseHelper.invoiceNo,\r\n                DatabaseHelper.customerPastelCode,\r\n                DatabaseHelper.storeName,\r\n                DatabaseHelper.deliveryDate,\r\n                DatabaseHelper.latitude,\r\n                DatabaseHelper.longitude,\r\n                DatabaseHelper.orderValueExc,\r\n                DatabaseHelper.orderValueInc,\r\n                DatabaseHelper.deliveryAddress,\r\n                DatabaseHelper.user,\r\n                DatabaseHelper.orderMass,\r\n                DatabaseHelper.uploaded,\r\n                DatabaseHelper.cashPaid,\r\n                DatabaseHelper.offloaded,\r\n                DatabaseHelper.strEmailCustomer,\r\n                DatabaseHelper.strCashsignature,\r\n                DatabaseHelper.invTotIncl,\r\n                DatabaseHelper.startTripTime,\r\n                DatabaseHelper.endTripTime,\r\n                DatabaseHelper.deliverySeq,\r\n                DatabaseHelper.strCoordinateStart,\r\n                DatabaseHelper.driverName,\r\n                DatabaseHelper.driverEmail,\r\n                DatabaseHelper.driverPassword,\r\n                DatabaseHelper.strCustomerSignedBy,\r\n                DatabaseHelper.threshold,\r\n        };\r\n\r\n        String selection = DatabaseHelper.invoiceNo + \"=?\";\r\n\r\n        String[] args = {\"\" + invoice};\r\n        // Cursor cursor = database.query(DatabaseHelper.PLAN_TABLE_NAME, columns, selection, args, null, null, null);\r\n        Cursor cursor = database.query(DatabaseHelper.ORDERS_TABLE_NAME, columns, selection, args, null, null, null);\r\n        while (cursor.moveToNext()) {\r\n            OrderModel model = new OrderModel(\r\n                    cursor.getInt(1),\r\n                    cursor.getString(2),\r\n                    cursor.getString(3),\r\n                    cursor.getString(4),\r\n                    cursor.getString(5),\r\n                    cursor.getInt(6),\r\n                    cursor.getInt(7),\r\n                    cursor.getString(8),\r\n                    cursor.getString(9),\r\n                    cursor.getString(10),\r\n                    cursor.getString(11),\r\n                    cursor.getString(12),\r\n                    cursor.getInt(13),\r\n                    cursor.getString(14),\r\n                    cursor.getInt(15),\r\n                    cursor.getString(16),\r\n                    cursor.getString(17),\r\n                    cursor.getString(18),\r\n                    cursor.getString(19),\r\n                    cursor.getString(20),\r\n                    cursor.getInt(21),\r\n                    cursor.getString(22),\r\n                    cursor.getString(23),\r\n                    cursor.getString(24),\r\n                    cursor.getString(25),\r\n                    cursor.getString(26),\r\n                    cursor.getString(27)\r\n            );\r\n            list.add(model);\r\n        }\r\n        return list;\r\n    }\r\n\r\n    //Get Order lines by INVOICE & WAREHOUSE\r\n    public List<OrderLinesModel> returnOrderLinesOffloadedByCategory(String invoice, String warehouse) {\r\n\r\n        List<OrderLinesModel> list = new ArrayList<>();\r\n\r\n        SQLiteDatabase database = helper.getWritableDatabase();\r\n        String[] columns = {DatabaseHelper.UID,\r\n                DatabaseHelper.orderId,\r\n                DatabaseHelper.invoiceNo,\r\n                DatabaseHelper.customerPastelCode,\r\n                DatabaseHelper.storeName,\r\n                DatabaseHelper.deliveryDate,\r\n                DatabaseHelper.latitude,\r\n                DatabaseHelper.longitude,\r\n                DatabaseHelper.orderValueExc,\r\n                DatabaseHelper.orderValueInc,\r\n                DatabaseHelper.deliveryAddress,\r\n                DatabaseHelper.user,\r\n                DatabaseHelper.orderMass,\r\n                DatabaseHelper.productId,\r\n                DatabaseHelper.qty,\r\n                DatabaseHelper.price,\r\n                DatabaseHelper.pastelDescription,\r\n                DatabaseHelper.pastelCode,\r\n                DatabaseHelper.orderDetailId,\r\n                DatabaseHelper.comment,\r\n                DatabaseHelper.returnQty,\r\n                DatabaseHelper.offLoadComment,\r\n                DatabaseHelper.blnoffloaded,\r\n                DatabaseHelper.strCustomerReason,\r\n                DatabaseHelper.intWareHouseId,\r\n                DatabaseHelper.wareHouseName\r\n        };\r\n        String selection = null;\r\n        String[] args;\r\n        if (warehouse.equals(\"ALL\")) {\r\n            selection = DatabaseHelper.invoiceNo + \"=?\";\r\n            args = new String[]{\"\" + invoice};\r\n        } else {\r\n            selection = DatabaseHelper.invoiceNo + \"=? AND \" + DatabaseHelper.wareHouseName + \"=?\";\r\n            args = new String[]{\"\" + invoice, \"\" + warehouse};\r\n        }\r\n        //String selection = DatabaseHelper.invoiceNo + \"=?\";\r\n\r\n        //String[] args = {\"\" + invoice, \"\" + warehouse};\r\n        // Cursor cursor = database.query(DatabaseHelper.PLAN_TABLE_NAME, columns, selection, args, null, null, null);\r\n        Cursor cursor = database.query(DatabaseHelper.ORDERS_LINES_TABLE_NAME, columns, selection, args, null, null, null);\r\n        while (cursor.moveToNext()) {\r\n            OrderLinesModel model = new OrderLinesModel(\r\n                    cursor.getString(1),\r\n                    cursor.getString(2),\r\n                    cursor.getString(3),\r\n                    cursor.getString(4),\r\n                    cursor.getString(5),\r\n                    cursor.getInt(6),\r\n                    cursor.getInt(7),\r\n                    cursor.getDouble(8),\r\n                    cursor.getDouble(9),\r\n                    cursor.getString(10),\r\n                    cursor.getString(11),\r\n                    cursor.getInt(12),\r\n                    cursor.getInt(13),\r\n                    cursor.getInt(14),\r\n                    cursor.getInt(15),\r\n                    cursor.getString(16),\r\n                    cursor.getString(17),\r\n                    cursor.getInt(18),\r\n                    cursor.getString(19),\r\n                    cursor.getString(20),\r\n                    cursor.getString(21),\r\n                    cursor.getInt(22),\r\n                    cursor.getString(23),\r\n                    cursor.getString(24),\r\n                    cursor.getString(25)\r\n            );\r\n            list.add(model);\r\n        }\r\n        return list;\r\n    }\r\n\r\n    @SuppressLint(\"Range\")\r\n    public int returnOrderLinesCrateCount(String InvoiceNo){\r\n\r\n        int cratesCount = 0;\r\n        SQLiteDatabase db = helper.getWritableDatabase();\r\n        Cursor cursor = db.rawQuery(\"Select Qty from '\"+DatabaseHelper.ORDERS_LINES_TABLE_NAME+\"' where OrderId ='\"+InvoiceNo+\"'\", null);\r\n\r\n        if (cursor.moveToFirst()) {\r\n            do {\r\n                cratesCount = cratesCount + Integer.parseInt(cursor.getString(cursor.getColumnIndex(\"Qty\")) ) ;\r\n\r\n            } while (cursor.moveToNext());\r\n        }\r\n        cursor.close();\r\n        db.close();\r\n        return cratesCount;\r\n    }\r\n\r\n    /**\r\n     * UPDATE Database\r\n     */\r\n\r\n    /**\r\n     * DELETE Database\r\n     */\r\n\r\n    //get Reference\r\n//    public List<RefModel> getRefById(int userID) {\r\n//\r\n//        refList.clear();\r\n//        SQLiteDatabase database = helper.getWritableDatabase();\r\n//        //select * from tableName where name = ? and customerName = ?:\r\n//        // String selection = DatabaseHelper.USER_NAME+\" where ? AND \"+DatabaseHelper.CUSTOMER_NAME+\" LIKE ?\";\r\n//        String selection = DatabaseHelper.userId + \"=?\";\r\n//\r\n//        String[] args = {\"\"+userID};\r\n//        String[] columns = {DatabaseHelper.UID, DatabaseHelper.intAutoPickingHeader,DatabaseHelper.userId,\r\n//                DatabaseHelper.strUnickReference,DatabaseHelper.strPickingNickname\r\n//        };\r\n//\r\n//        // Cursor cursor = database.query(DatabaseHelper.PLAN_TABLE_NAME, columns, selection, args, null, null, null);\r\n//        Cursor cursor = database.query(DatabaseHelper.REFERENCE_TABLE_NAME, columns, selection, args, null, null, null);\r\n//        while (cursor.moveToNext()) {\r\n//            RefModel model = new RefModel(\r\n//                    cursor.getInt(1),\r\n//                    cursor.getString(3),\r\n//                    cursor.getString(4)\r\n//            );\r\n//            refList.add(model);\r\n//        }\r\n//        return refList;\r\n//    }\r\n\r\n\r\n    /**\r\n     * Dropping the table\r\n     */\r\n    //Drop IP Table:\r\n    public void dropIPTable() {\r\n        SQLiteDatabase database = helper.getWritableDatabase();\r\n        database.execSQL(DatabaseHelper.DROP_SERVER_IP_TABLE);\r\n        database.execSQL(DatabaseHelper.CREATE_SERVER_IP_TABLE);\r\n    }\r\n\r\n    //Drop ROUTE Table:\r\n    public void dropRouteTable() {\r\n        SQLiteDatabase database = helper.getWritableDatabase();\r\n        database.execSQL(DatabaseHelper.DROP_ROUTE_TABLE);\r\n        database.execSQL(DatabaseHelper.CREATE_ROUTE_TABLE);\r\n    }\r\n\r\n    //Drop ORDER TYPE Table:\r\n    public void dropOrderTypeTable() {\r\n        SQLiteDatabase database = helper.getWritableDatabase();\r\n        database.execSQL(DatabaseHelper.DROP_ORDER_TYPE_TABLE);\r\n        database.execSQL(DatabaseHelper.CREATE_ORDER_TYPE_TABLE);\r\n    }\r\n\r\n    //Drop ORDER TYPE Table:\r\n    public void dropOrderTable() {\r\n        SQLiteDatabase database = helper.getWritableDatabase();\r\n        database.execSQL(DatabaseHelper.DROP_ORDERS_TABLE);\r\n        database.execSQL(DatabaseHelper.CREATE_ORDERS_TABLE);\r\n    }\r\n\r\n    //Update Flag by Line No.\r\n    // Update Quantity by name and reference code:\r\n//    public long updatePlanByLine(int lineNo, int flag) {\r\n//        SQLiteDatabase database = helper.getWritableDatabase();\r\n//        String selection = DatabaseHelper.LineNos + \" LIKE ? \";\r\n//        String[] args = {\"\" + lineNo};\r\n//\r\n//        ContentValues contentValues = new ContentValues();\r\n//        contentValues.put(DatabaseHelper.FLAG, flag);\r\n//\r\n//\r\n//        long ids = database.update(DatabaseHelper.PLAN_TABLE_NAME, contentValues, selection, args);\r\n//\r\n//        return ids;\r\n//    }\r\n\r\n\r\n    class DatabaseHelper extends SQLiteOpenHelper {\r\n        private Context context;\r\n\r\n        private static final String DATABASE_NAME = \"drivers_app.db\";\r\n        private static final int VERSION_NUMBER = 12;\r\n\r\n        private static final String UID = \"_id\";\r\n\r\n        /**\r\n         * Server IP table\r\n         */\r\n\r\n        private static final String SERVER_IP_TABLE_NAME = \"server_ip\";\r\n        private static final String serverIP = \"serverIP\";\r\n        private static final String emailId = \"emailId\";\r\n        private static final String companyName = \"companyName\";\r\n        private static final String deviceId = \"deviceId\";\r\n        private static final String regKey = \"regKey\";\r\n\r\n        //Creating the table:\r\n        private static final String CREATE_SERVER_IP_TABLE = \"CREATE TABLE \" + SERVER_IP_TABLE_NAME\r\n                + \" (\" + UID + \" INTEGER PRIMARY KEY AUTOINCREMENT, \"\r\n                + serverIP + \" VARCHAR(255),\"\r\n                + emailId + \" VARCHAR(255),\"\r\n                + companyName + \" VARCHAR(255),\"\r\n                + deviceId + \" VARCHAR(255),\"\r\n                + regKey + \" VARCHAR(255));\";\r\n        private static final String DROP_SERVER_IP_TABLE = \"DROP TABLE IF EXISTS \" + SERVER_IP_TABLE_NAME;\r\n\r\n\r\n        /**\r\n         * Route Table\r\n         */\r\n\r\n        private static final String ROUTE_TABLE_NAME = \"routs\";\r\n        private static final String ROUTE_ID = \"routeID\";\r\n        private static final String ROUTE_NAME = \"routeName\";\r\n\r\n        //Creating the table:\r\n        private static final String CREATE_ROUTE_TABLE = \"CREATE TABLE \" + ROUTE_TABLE_NAME\r\n                + \" (\" + UID + \" INTEGER PRIMARY KEY AUTOINCREMENT, \"\r\n                + ROUTE_ID + \" INTEGER,\"\r\n                + ROUTE_NAME + \" VARCHAR(255));\";\r\n        private static final String DROP_ROUTE_TABLE = \"DROP TABLE IF EXISTS \" + ROUTE_TABLE_NAME;\r\n\r\n        /**\r\n         * Order Type Table\r\n         */\r\n\r\n        private static final String ORDER_TYPE_TABLE_NAME = \"orders\";\r\n        private static final String ORDER_TYPE_ID = \"orderTypeId\";\r\n        private static final String ORDER_TYPE = \"orderType\";\r\n\r\n        //Creating the table:\r\n        private static final String CREATE_ORDER_TYPE_TABLE = \"CREATE TABLE \" + ORDER_TYPE_TABLE_NAME\r\n                + \" (\" + UID + \" INTEGER PRIMARY KEY AUTOINCREMENT, \"\r\n                + ORDER_TYPE_ID + \" INTEGER,\"\r\n                + ORDER_TYPE + \" VARCHAR(255));\";\r\n        private static final String DROP_ORDER_TYPE_TABLE = \"DROP TABLE IF EXISTS \" + ORDER_TYPE_TABLE_NAME;\r\n\r\n        /**\r\n         * Order Table\r\n         */\r\n\r\n        private static final String ORDERS_TABLE_NAME = \"orders_table\";\r\n        private static final String orderId = \"orderId\";\r\n        private static final String invoiceNo = \"invoiceNo\";\r\n        private static final String customerPastelCode = \"customerPastelCode\";\r\n        private static final String storeName = \"storeName\";\r\n        private static final String deliveryDate = \"deliveryDate\";\r\n        private static final String latitude = \"latitude\";\r\n        private static final String longitude = \"longitude\";\r\n        private static final String orderValueExc = \"orderValueExc\";\r\n        private static final String orderValueInc = \"orderValueInc\";\r\n        private static final String deliveryAddress = \"deliveryAddress\";\r\n        private static final String user = \"user\";\r\n        private static final String orderMass = \"orderMass\";\r\n        private static final String uploaded = \"uploaded\";\r\n        private static final String cashPaid = \"cashPaid\";\r\n        private static final String offloaded = \"offloaded\";\r\n        private static final String strEmailCustomer = \"strEmailCustomer\";\r\n        private static final String strCashsignature = \"strCashsignature\";\r\n        private static final String invTotIncl = \"invTotIncl\";\r\n        private static final String startTripTime = \"startTripTime\";\r\n        private static final String endTripTime = \"endTripTime\";\r\n        private static final String deliverySeq = \"deliverySeq\";\r\n        private static final String strCoordinateStart = \"strCoordinateStart\";\r\n        private static final String driverName = \"driverName\";\r\n        private static final String driverEmail = \"driverEmail\";\r\n        private static final String driverPassword = \"driverPassword\";\r\n        private static final String strCustomerSignedBy = \"strCustomerSignedBy\";\r\n        private static final String threshold = \"threshold\";\r\n        //Creating the Order Table:\r\n        private static final String CREATE_ORDERS_TABLE = \"CREATE TABLE \" + ORDERS_TABLE_NAME\r\n                + \" (\" + UID + \" INTEGER PRIMARY KEY AUTOINCREMENT, \"\r\n                + orderId + \" INTEGER,\"\r\n                + invoiceNo + \" VARCHAR(255),\"\r\n                + customerPastelCode + \" VARCHAR(255),\"\r\n                + storeName + \" VARCHAR(255),\"\r\n                + deliveryDate + \" VARCHAR(255),\"\r\n                + latitude + \" VARCHAR(255),\"\r\n                + longitude + \" VARCHAR(255),\"\r\n                + orderValueExc + \" VARCHAR(255),\"\r\n                + orderValueInc + \" VARCHAR(255),\"\r\n                + deliveryAddress + \" VARCHAR(255),\"\r\n                + user + \" VARCHAR(255),\"\r\n                + orderMass + \" VARCHAR(255),\"\r\n                + uploaded + \" INTEGER,\"\r\n                + cashPaid + \" VARCHAR(255),\"\r\n                + offloaded + \" INTEGER,\"\r\n                + strEmailCustomer + \" VARCHAR(255),\"\r\n                + strCashsignature + \" VARCHAR(255),\"\r\n                + invTotIncl + \" VARCHAR(255),\"\r\n                + startTripTime + \" VARCHAR(255),\"\r\n                + endTripTime + \" VARCHAR(255),\"\r\n                + deliverySeq + \" INTEGER,\"\r\n                + strCoordinateStart + \" VARCHAR(255),\"\r\n                + driverName + \" VARCHAR(255),\"\r\n                + driverEmail + \" VARCHAR(255),\"\r\n                + driverPassword + \" VARCHAR(255),\"\r\n                + strCustomerSignedBy + \" VARCHAR(255),\"\r\n                + threshold + \" VARCHAR(255));\";\r\n        private static final String DROP_ORDERS_TABLE = \"DROP TABLE IF EXISTS \" + ORDERS_TABLE_NAME;\r\n\r\n\r\n        /**\r\n         * OrderLines Table\r\n         */\r\n\r\n        private static final String ORDERS_LINES_TABLE_NAME = \"orders_lines\";\r\n        private static final String productId = \"productId\";\r\n        private static final String qty = \"qty\";\r\n        private static final String price = \"price\";\r\n        private static final String pastelDescription = \"pastelDescription\";\r\n        private static final String pastelCode = \"pastelCode\";\r\n        private static final String orderDetailId = \"orderDetailId\";\r\n        private static final String comment = \"comment\";\r\n        private static final String returnQty = \"returnQty\";\r\n        private static final String offLoadComment = \"offLoadComment\";\r\n        private static final String blnoffloaded = \"blnoffloaded\";\r\n        private static final String strCustomerReason = \"strCustomerReason\";\r\n        private static final String intWareHouseId = \"intWareHouseId\";\r\n        private static final String wareHouseName = \"wareHouseName\";\r\n        //Creating the Order Table:\r\n        private static final String CREATE_ORDERS_LINES_TABLE = \"CREATE TABLE \" + ORDERS_LINES_TABLE_NAME\r\n                + \" (\" + UID + \" INTEGER PRIMARY KEY AUTOINCREMENT, \"\r\n                + orderId + \" VARCHAR(255),\"\r\n                + invoiceNo + \" VARCHAR(255),\"\r\n                + customerPastelCode + \" VARCHAR(255),\"\r\n                + storeName + \" VARCHAR(255),\"\r\n                + deliveryDate + \" VARCHAR(255),\"\r\n                + latitude + \" VARCHAR(255),\"\r\n                + longitude + \" VARCHAR(255),\"\r\n                + orderValueExc + \" VARCHAR(255),\"\r\n                + orderValueInc + \" VARCHAR(255),\"\r\n                + deliveryAddress + \" VARCHAR(255),\"\r\n                + user + \" VARCHAR(255),\"\r\n                + orderMass + \" VARCHAR(255),\"\r\n                + productId + \" INTEGER,\"\r\n                + qty + \" INTEGER,\"\r\n                + price + \" VARCHAR(255),\"\r\n                + pastelDescription + \" VARCHAR(255),\"\r\n                + pastelCode + \" VARCHAR(255),\"\r\n                + orderDetailId + \" INTEGER,\"\r\n                + comment + \" VARCHAR(255),\"\r\n                + returnQty + \" VARCHAR(255),\"\r\n                + offLoadComment + \" VARCHAR(255),\"\r\n                + blnoffloaded + \" INTEGER,\"\r\n                + strCustomerReason + \" VARCHAR(255),\"\r\n                + intWareHouseId + \" VARCHAR(255),\"\r\n                + wareHouseName + \" VARCHAR(255));\";\r\n        private static final String DROP_ORDERS_LINES_TABLE = \"DROP TABLE IF EXISTS \" + ORDERS_LINES_TABLE_NAME;\r\n\r\n\r\n        /**\r\n         * WareHouses Table\r\n         */\r\n        /**\r\n         * Order Type Table\r\n         */\r\n\r\n        private static final String WAREHOUSE_TABLE_NAME = \"WareHouses\";\r\n        private static final String WareHouseId = \"WareHouseId\";\r\n        private static final String WareHouse = \"WareHouse\";\r\n\r\n        //Creating the table:\r\n        private static final String CREATE_WAREHOUSE_TABLE = \"CREATE TABLE \" + WAREHOUSE_TABLE_NAME\r\n                + \" (\" + UID + \" INTEGER PRIMARY KEY AUTOINCREMENT, \"\r\n                + WareHouseId + \" VARCHAR(255),\"\r\n                + WareHouse + \" VARCHAR(255));\";\r\n        private static final String DROP_WAREHOUSE_TABLE = \"DROP TABLE IF EXISTS \" + WAREHOUSE_TABLE_NAME;\r\n\r\n\r\n        public DatabaseHelper(@Nullable Context context) {\r\n            super(context, DATABASE_NAME, null, VERSION_NUMBER);\r\n            this.context = context;\r\n        }\r\n\r\n        @Override\r\n        public void onCreate(SQLiteDatabase db) {\r\n            //Create table:\r\n            try {\r\n                db.execSQL(CREATE_SERVER_IP_TABLE);\r\n                db.execSQL(CREATE_ROUTE_TABLE);\r\n                db.execSQL(CREATE_ORDER_TYPE_TABLE);\r\n                db.execSQL(CREATE_ORDERS_TABLE);\r\n                db.execSQL(CREATE_ORDERS_LINES_TABLE);\r\n                db.execSQL(CREATE_WAREHOUSE_TABLE);\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n            }\r\n\r\n        }\r\n\r\n        @Override\r\n        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {\r\n            try {\r\n                db.execSQL(DROP_SERVER_IP_TABLE);\r\n                db.execSQL(DROP_ROUTE_TABLE);\r\n                db.execSQL(DROP_ORDER_TYPE_TABLE);\r\n                db.execSQL(DROP_ORDERS_TABLE);\r\n                db.execSQL(DROP_ORDERS_LINES_TABLE);\r\n                db.execSQL(DROP_WAREHOUSE_TABLE);\r\n                onCreate(db);\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/regin/reginald/vehicleanddrivers/Aariyan/Database/DatabaseAdapter.java b/app/src/main/java/com/regin/reginald/vehicleanddrivers/Aariyan/Database/DatabaseAdapter.java
--- a/app/src/main/java/com/regin/reginald/vehicleanddrivers/Aariyan/Database/DatabaseAdapter.java	
+++ b/app/src/main/java/com/regin/reginald/vehicleanddrivers/Aariyan/Database/DatabaseAdapter.java	
@@ -493,6 +493,45 @@
         return cratesCount;
     }
 
+    @SuppressLint("Range")
+    public List<OrderLinesModel> returnOrderLines(String InvoiceNo){
+        List<OrderLinesModel> listOfOrderLines = new ArrayList<>();
+        SQLiteDatabase db = helper.getWritableDatabase();
+        Cursor cursor = db.rawQuery("Select Qty from '"+DatabaseHelper.ORDERS_LINES_TABLE_NAME+"' where OrderId ='"+InvoiceNo+"'", null);
+
+        while (cursor.moveToNext()) {
+            OrderLinesModel model = new OrderLinesModel(
+                    cursor.getString(1),
+                    cursor.getString(2),
+                    cursor.getString(3),
+                    cursor.getString(4),
+                    cursor.getString(5),
+                    cursor.getInt(6),
+                    cursor.getInt(7),
+                    cursor.getDouble(8),
+                    cursor.getDouble(9),
+                    cursor.getString(10),
+                    cursor.getString(11),
+                    cursor.getInt(12),
+                    cursor.getInt(13),
+                    cursor.getInt(14),
+                    cursor.getInt(15),
+                    cursor.getString(16),
+                    cursor.getString(17),
+                    cursor.getInt(18),
+                    cursor.getString(19),
+                    cursor.getString(20),
+                    cursor.getString(21),
+                    cursor.getInt(22),
+                    cursor.getString(23),
+                    cursor.getString(24),
+                    cursor.getString(25)
+            );
+            listOfOrderLines.add(model);
+        }
+        return listOfOrderLines;
+    }
+
     /**
      * UPDATE Database
      */
@@ -560,6 +599,20 @@
         database.execSQL(DatabaseHelper.CREATE_ORDERS_TABLE);
     }
 
+    //Drop ORDER LINES Table:
+    public void dropOrderLinesTable() {
+        SQLiteDatabase database = helper.getWritableDatabase();
+        database.execSQL(DatabaseHelper.DROP_ORDERS_LINES_TABLE);
+        database.execSQL(DatabaseHelper.CREATE_ORDERS_LINES_TABLE);
+    }
+
+    //Drop ORDER LINES Table:
+    public void dropWareHousesTable() {
+        SQLiteDatabase database = helper.getWritableDatabase();
+        database.execSQL(DatabaseHelper.DROP_WAREHOUSE_TABLE);
+        database.execSQL(DatabaseHelper.CREATE_WAREHOUSE_TABLE);
+    }
+
     //Update Flag by Line No.
     // Update Quantity by name and reference code:
 //    public long updatePlanByLine(int lineNo, int flag) {
@@ -581,7 +634,7 @@
         private Context context;
 
         private static final String DATABASE_NAME = "drivers_app.db";
-        private static final int VERSION_NUMBER = 12;
+        private static final int VERSION_NUMBER = 2;
 
         private static final String UID = "_id";
 
@@ -626,7 +679,7 @@
          * Order Type Table
          */
 
-        private static final String ORDER_TYPE_TABLE_NAME = "orders";
+        private static final String ORDER_TYPE_TABLE_NAME = "orders_type";
         private static final String ORDER_TYPE_ID = "orderTypeId";
         private static final String ORDER_TYPE = "orderType";
 
@@ -754,9 +807,6 @@
         /**
          * WareHouses Table
          */
-        /**
-         * Order Type Table
-         */
 
         private static final String WAREHOUSE_TABLE_NAME = "WareHouses";
         private static final String WareHouseId = "WareHouseId";
Index: app/src/main/java/com/regin/reginald/vehicleanddrivers/Aariyan/Adapter/OrdersAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.regin.reginald.vehicleanddrivers.Aariyan.Adapter;\r\n\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.util.Log;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.CheckBox;\r\nimport android.widget.ListView;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.regin.reginald.vehicleanddrivers.Aariyan.Constant.Constant;\r\nimport com.regin.reginald.vehicleanddrivers.Aariyan.Model.OrderModel;\r\nimport com.regin.reginald.vehicleanddrivers.CratesActivity;\r\nimport com.regin.reginald.vehicleanddrivers.InvoiceDetails;\r\nimport com.regin.reginald.vehicleanddrivers.MainActivity;\r\nimport com.regin.reginald.vehicleanddrivers.MyMapActivity;\r\nimport com.regin.reginald.vehicleanddrivers.R;\r\n\r\nimport java.util.List;\r\n\r\npublic class OrdersAdapter extends RecyclerView.Adapter<OrdersAdapter.ViewHolder> {\r\n\r\n    private Context context;\r\n    private List<OrderModel> list;\r\n    double lat = -33.966145;\r\n    double lon = 22.466218;\r\n\r\n    public OrdersAdapter(Context context, List<OrderModel> list) {\r\n        this.context = context;\r\n        this.list = list;\r\n    }\r\n\r\n    @NonNull\r\n    @Override\r\n    public ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n        return new ViewHolder(LayoutInflater.from(context).inflate(R.layout.single_order_rows, parent, false));\r\n    }\r\n\r\n\r\n    @Override\r\n    public void onBindViewHolder(@NonNull ViewHolder holder, int position) {\r\n        OrderModel model = list.get(position);\r\n        holder.storeName.setText(model.getStoreName());\r\n        holder.orderId.setText(\"\" + model.getOrderId());\r\n        holder.deliveryAddress.setText(model.getDeliveryAddress());\r\n        int status = model.getOffloaded();\r\n        if (status == 0) {\r\n            holder.checkBox.setChecked(false);\r\n        } else {\r\n            holder.checkBox.setChecked(true);\r\n        }\r\n\r\n        holder.offloadStatus.setText(\"\" + model.getOffloaded());\r\n\r\n        /**\r\n         *\r\n         * Click Listener:\r\n         */\r\n\r\n        holder.itemView.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                if (model.getThreshold().equals(\"0\")) {\r\n                    Intent b = new Intent(context, InvoiceDetails.class);\r\n                    //UpdateDeliverySeq();\r\n                    b.putExtra(\"deldate\", Constant.DELIVERY_DATE);\r\n                    b.putExtra(\"routes\", Constant.ROUTES_NAME);\r\n                    b.putExtra(\"ordertype\", Constant.ORDER_TYPE);\r\n                    b.putExtra(\"invoiceno\", model.getInvoiceNo());\r\n                    b.putExtra(\"cash\", model.getCashPaid());\r\n                    context.startActivity(b);\r\n                } else {\r\n                    Intent b = new Intent(context, CratesActivity.class);\r\n                    b.putExtra(\"invoiceno\", model.getInvoiceNo());\r\n                    b.putExtra(\"threshold\", model.getThreshold());\r\n                    b.putExtra(\"storename\", model.getStoreName());\r\n                    b.putExtra(\"deldate\", Constant.DELIVERY_DATE);\r\n                    b.putExtra(\"routes\", Constant.ROUTES_NAME);\r\n                    b.putExtra(\"ordertype\", Constant.ORDER_TYPE);\r\n                    context.startActivity(b);\r\n                }\r\n            }\r\n        });\r\n\r\n\r\n        /**\r\n         * Long Click\r\n         */\r\n        holder.itemView.setOnLongClickListener(new View.OnLongClickListener() {\r\n            @Override\r\n            public boolean onLongClick(View view) {\r\n                Log.d(\"CHECKING_LOCATION\", \"\" + model.getLatitude() + \" - \" + model.getLongitude());\r\n                Intent intent = new Intent(context, MyMapActivity.class);\r\n                intent.putExtra(\"Lat\", \"\" + model.getLatitude());\r\n                intent.putExtra(\"Lon\", \"\" + model.getLongitude());\r\n                intent.putExtra(\"seq\", \"\");\r\n//                intent.putExtra(\"currentLat\", lat);\r\n//                intent.putExtra(\"currentLon\", lon);\r\n                intent.putExtra(\"custName\", \"\" + model.getCustomerPastelCode());\r\n                context.startActivity(intent);\r\n                return false;\r\n            }\r\n        });\r\n    }\r\n\r\n    @Override\r\n    public int getItemCount() {\r\n        return list.size();\r\n    }\r\n\r\n    public class ViewHolder extends RecyclerView.ViewHolder {\r\n\r\n        private TextView storeName, orderId, deliveryAddress, offloadStatus;\r\n        private CheckBox checkBox;\r\n\r\n        public ViewHolder(@NonNull View itemView) {\r\n            super(itemView);\r\n            storeName = itemView.findViewById(R.id.storeName);\r\n            orderId = itemView.findViewById(R.id.orderIds);\r\n            deliveryAddress = itemView.findViewById(R.id.deliveryAddress);\r\n            offloadStatus = itemView.findViewById(R.id.offloadStatus);\r\n            checkBox = itemView.findViewById(R.id.checkbox);\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/regin/reginald/vehicleanddrivers/Aariyan/Adapter/OrdersAdapter.java b/app/src/main/java/com/regin/reginald/vehicleanddrivers/Aariyan/Adapter/OrdersAdapter.java
--- a/app/src/main/java/com/regin/reginald/vehicleanddrivers/Aariyan/Adapter/OrdersAdapter.java	
+++ b/app/src/main/java/com/regin/reginald/vehicleanddrivers/Aariyan/Adapter/OrdersAdapter.java	
@@ -45,6 +45,7 @@
     @Override
     public void onBindViewHolder(@NonNull ViewHolder holder, int position) {
         OrderModel model = list.get(position);
+        Log.d("THRESHOLD_CHECKED", "onBindViewHolder: "+model.getThreshold());
         holder.storeName.setText(model.getStoreName());
         holder.orderId.setText("" + model.getOrderId());
         holder.deliveryAddress.setText(model.getDeliveryAddress());
@@ -65,7 +66,10 @@
         holder.itemView.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View view) {
-                if (model.getThreshold().equals("0")) {
+                //Original Threshold value is  0 & 1:
+                //if (model.getThreshold().equals("0")) {
+                //Only for the testing purpose setting threshold 50:
+                if (model.getThreshold().equals("50")) {
                     Intent b = new Intent(context, InvoiceDetails.class);
                     //UpdateDeliverySeq();
                     b.putExtra("deldate", Constant.DELIVERY_DATE);
