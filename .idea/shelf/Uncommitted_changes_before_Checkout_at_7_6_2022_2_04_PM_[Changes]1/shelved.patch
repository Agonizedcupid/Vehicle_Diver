Index: app/src/main/java/com/regin/reginald/vehicleanddrivers/InvoiceDetails.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.regin.reginald.vehicleanddrivers;\r\n\r\nimport android.Manifest;\r\nimport android.app.Activity;\r\nimport android.app.Dialog;\r\nimport android.app.ProgressDialog;\r\nimport android.bluetooth.BluetoothAdapter;\r\nimport android.bluetooth.BluetoothDevice;\r\nimport android.content.Context;\r\nimport android.content.DialogInterface;\r\nimport android.content.Intent;\r\nimport android.content.pm.PackageManager;\r\nimport android.database.sqlite.SQLiteDatabase;\r\nimport android.graphics.Bitmap;\r\nimport android.graphics.Canvas;\r\nimport android.graphics.Color;\r\nimport android.location.Location;\r\nimport android.location.LocationManager;\r\nimport android.net.Uri;\r\nimport android.os.AsyncTask;\r\nimport android.os.Build;\r\nimport android.os.Bundle;\r\nimport android.os.Environment;\r\nimport android.os.Handler;\r\nimport android.os.StrictMode;\r\nimport android.provider.Settings;\r\n\r\nimport androidx.appcompat.app.AlertDialog;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.core.app.ActivityCompat;\r\n//import android.support.v7.app.AlertDialog;\r\n//import android.support.v7.app.AppCompatActivity;\r\nimport android.text.Editable;\r\nimport android.util.Base64;\r\nimport android.util.Log;\r\nimport android.view.KeyEvent;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.view.WindowManager;\r\nimport android.widget.AdapterView;\r\nimport android.widget.ArrayAdapter;\r\nimport android.widget.BaseAdapter;\r\nimport android.widget.Button;\r\nimport android.widget.CheckBox;\r\nimport android.widget.EditText;\r\nimport android.widget.ListView;\r\nimport android.widget.Spinner;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\n\r\nimport com.androidnetworking.AndroidNetworking;\r\n\r\nimport com.bxl.config.util.BXLBluetoothLE;\r\nimport com.regin.reginald.data.DatabaseHelper;\r\nimport com.regin.reginald.model.OrderLines;\r\nimport com.regin.reginald.model.Orders;\r\nimport com.regin.reginald.model.OtherAttributes;\r\nimport com.regin.reginald.model.SettingsModel;\r\nimport com.regin.reginald.model.WareHouses;\r\nimport com.github.gcacace.signaturepad.views.SignaturePad;\r\n\r\nimport java.io.ByteArrayOutputStream;\r\nimport java.io.File;\r\nimport java.io.FileOutputStream;\r\nimport java.io.IOException;\r\nimport java.io.OutputStream;\r\nimport java.io.OutputStreamWriter;\r\nimport java.text.DateFormat;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.ArrayList;\r\nimport java.util.Calendar;\r\nimport java.util.Date;\r\nimport java.util.HashMap;\r\nimport java.util.HashSet;\r\nimport java.util.List;\r\nimport java.util.Set;\r\n\r\nimport static com.loopj.android.http.AsyncHttpClient.log;\r\n\r\nimport com.regin.reginald.vehicleanddrivers.Aariyan.Database.DatabaseAdapter;\r\nimport com.regin.reginald.vehicleanddrivers.Aariyan.Model.IpModel;\r\nimport com.regin.reginald.vehicleanddrivers.Aariyan.Model.OrderLinesModel;\r\nimport com.regin.reginald.vehicleanddrivers.Aariyan.Model.OrderModel;\r\nimport com.regin.reginald.vehicleanddrivers.Aariyan.Model.RouteModel;\r\nimport com.regin.reginald.vehicleanddrivers.Aariyan.Model.WareHousesModel;\r\nimport com.regin.reginald.vehicleanddrivers.PrinterControl.BixolonPrinter;\r\n\r\nimport jpos.JposException;\r\n\r\nimport com.google.android.gms.common.ConnectionResult;\r\nimport com.google.android.gms.common.api.GoogleApiClient;\r\nimport com.google.android.gms.location.LocationRequest;\r\nimport com.google.android.gms.location.LocationServices;\r\nimport com.google.android.gms.maps.model.LatLng;\r\nimport com.itextpdf.text.Document;\r\nimport com.itextpdf.text.DocumentException;\r\nimport com.itextpdf.text.Element;\r\nimport com.itextpdf.text.Font;\r\nimport com.itextpdf.text.Image;\r\nimport com.itextpdf.text.PageSize;\r\nimport com.itextpdf.text.Paragraph;\r\nimport com.itextpdf.text.Phrase;\r\nimport com.itextpdf.text.Rectangle;\r\nimport com.itextpdf.text.pdf.PdfContentByte;\r\nimport com.itextpdf.text.pdf.PdfPCell;\r\nimport com.itextpdf.text.pdf.PdfPTable;\r\nimport com.itextpdf.text.pdf.PdfWriter;\r\nimport com.jakewharton.fliptables.FlipTable;\r\n\r\nimport org.apache.http.HttpResponse;\r\nimport org.apache.http.client.ClientProtocolException;\r\nimport org.apache.http.client.HttpClient;\r\nimport org.apache.http.client.entity.UrlEncodedFormEntity;\r\nimport org.apache.http.client.methods.HttpPost;\r\nimport org.apache.http.impl.client.DefaultHttpClient;\r\nimport org.apache.http.message.BasicNameValuePair;\r\nimport org.apache.http.util.EntityUtils;\r\nimport org.json.JSONArray;\r\nimport org.json.JSONObject;\r\n\r\npublic class InvoiceDetails extends AppCompatActivity implements View.OnClickListener, GoogleApiClient.ConnectionCallbacks, GoogleApiClient.OnConnectionFailedListener, com.google.android.gms.location.LocationListener {\r\n\r\n    public class Item {\r\n        String ItemString;\r\n        String ItemString2;\r\n        String ItemString3;\r\n        String ItemString4;\r\n        String ItemString5;\r\n        String ItemString6;\r\n        String ItemString7;\r\n        String ItemString8;\r\n        boolean checked;\r\n\r\n\r\n        Item(String t, String t2, String t3, String t4, String t5, String t6, String t7, String t8) {\r\n            ItemString = t;\r\n            ItemString2 = t2;\r\n            ItemString3 = t3;\r\n            ItemString4 = t4;\r\n            ItemString5 = t5;\r\n            ItemString6 = t6;\r\n            ItemString7 = t7;\r\n            ItemString8 = t8;\r\n\r\n        }\r\n\r\n        public boolean isChecked() {\r\n            return checked;\r\n        }\r\n    }\r\n\r\n    public class CheckTruckItem {\r\n        String ItemString;\r\n        String ItemString2;\r\n\r\n\r\n        CheckTruckItem(String t, String t2) {\r\n            ItemString = t;\r\n            ItemString2 = t2;\r\n\r\n\r\n        }\r\n    }\r\n\r\n    static class ViewHolder {\r\n        //ImageView icon;\r\n        TextView text;\r\n        TextView text2;\r\n        TextView text3;\r\n        TextView text4;\r\n        TextView text5;\r\n        CheckBox text6;\r\n        TextView text7;\r\n\r\n        public float lastTouchedX;\r\n        public float lastTouchedY;\r\n\r\n    }\r\n\r\n    static class ViewHolderTruck {\r\n        //ImageView icon;\r\n        TextView text;\r\n        TextView text2;\r\n    }\r\n\r\n    /*\r\n     * Inner list view*/\r\n\r\n    public class ItemsListAdapter extends BaseAdapter {\r\n\r\n        private Context context;\r\n        private List<Item> list;\r\n        private boolean[] checkBoxState = null;\r\n        private HashMap<Item, Boolean> checkedForCountry = new HashMap<>();\r\n\r\n        ItemsListAdapter(Context c, List<Item> l) {\r\n            context = c;\r\n            list = l;\r\n        }\r\n\r\n        @Override\r\n        public int getCount() {\r\n            return list.size();\r\n        }\r\n\r\n        @Override\r\n        public Object getItem(int position) {\r\n            return list.get(position);\r\n        }\r\n\r\n        @Override\r\n        public long getItemId(int position) {\r\n            return position;\r\n        }\r\n\r\n        public boolean isChecked(int position) {\r\n            return list.get(position).checked;\r\n        }\r\n\r\n\r\n        @Override\r\n        public View getView(final int position, View convertView, final ViewGroup parent) {\r\n            View rowView = convertView;\r\n\r\n\r\n            // reuse views\r\n            if (rowView == null) {\r\n                LayoutInflater inflater = ((Activity) context).getLayoutInflater();\r\n                // rowView = inflater.inflate(R.layout.pick_customer_row, null);\r\n                rowView = inflater.inflate(R.layout.orderlisting_rows, null);\r\n\r\n                ViewHolder viewHolder = new ViewHolder();\r\n                //  viewHolder.icon = (ImageView) rowView.findViewById(R.id.rowImageView);\r\n                viewHolder.text = (TextView) rowView.findViewById(R.id.storename);\r\n                viewHolder.text2 = (TextView) rowView.findViewById(R.id.address);\r\n                viewHolder.text3 = (TextView) rowView.findViewById(R.id.orderid);\r\n                viewHolder.text4 = (TextView) rowView.findViewById(R.id.del);\r\n                viewHolder.text5 = (TextView) rowView.findViewById(R.id.comment);\r\n                viewHolder.text6 = (CheckBox) rowView.findViewById(R.id.offload);\r\n                viewHolder.text7 = (TextView) rowView.findViewById(R.id.returned);\r\n\r\n                rowView.setTag(viewHolder);\r\n            }\r\n\r\n            final ViewHolder holder = (ViewHolder) rowView.getTag();\r\n            // holder.icon.setImageDrawable(list.get(position).ItemDrawable);\r\n            holder.text.setText(list.get(position).ItemString);\r\n            holder.text2.setText(list.get(position).ItemString2);\r\n            holder.text3.setText(list.get(position).ItemString3);\r\n            holder.text4.setText(list.get(position).ItemString4);\r\n            //  holder.text5.setText(list.get(position).ItemString5);\r\n            holder.text7.setText(list.get(position).ItemString5);\r\n            holder.text5.setBackgroundColor(Color.rgb(206, 204, 204));//\r\n\r\n\r\n            if ((list.get(position).ItemString7).equals(\"1\")) {\r\n                list.get(position).checked = true;\r\n                holder.text6.setChecked(true);\r\n\r\n                //\r\n            } else {\r\n                list.get(position).checked = false;\r\n                holder.text6.setChecked(false);\r\n            }\r\n            final Item country = list.get(position);\r\n            checkBoxState = new boolean[list.size()];\r\n            if (checkBoxState != null)\r\n                holder.text6.setChecked(checkBoxState[position]);\r\n\r\n\r\n            // holder.text6.setChecked(checkBoxState[position]);\r\n\r\n            Log.e(\"*******\", \"************PPPP\" + checkedForCountry.get(list.get(position)));\r\n            Log.e(\"*******\", \"************QQQQ\" + checkedForCountry.get(country));\r\n\r\n            if (checkedForCountry.get(country) != null) {\r\n                // holder.text6.setChecked(checkedForCountry.get(checkedForCountry.get(country)));\r\n                holder.text6.setChecked(checkedForCountry.get(country));\r\n            }\r\n            holder.text6.setTag(country);\r\n            holder.text6.setChecked(isChecked(position));\r\n            return rowView;\r\n        }\r\n\r\n        public List<Item> getList() {\r\n            return list;\r\n        }\r\n\r\n        public void ischecked(int position, boolean flag) {\r\n            Log.e(\"this--\", \"------------------------\" + this.list.get(position));\r\n            Log.e(\"position--\", \"------------------------\" + position);\r\n            Log.e(\"flag--\", \"------------------------\" + flag);\r\n\r\n            checkedForCountry.put(this.list.get(position), flag);\r\n\r\n            Log.e(\"len+++\", \"++++++++++++++++++++++++++++++++++++++++\" + checkedForCountry);\r\n        }\r\n\r\n    }\r\n\r\n    public class ItemsListAdapterTruck extends BaseAdapter {\r\n\r\n        private Context context;\r\n        private List<Item> list;\r\n        private boolean[] checkBoxState = null;\r\n        private HashMap<Item, Boolean> checkedForCountry = new HashMap<>();\r\n\r\n        ItemsListAdapterTruck(Context c, List<Item> l) {\r\n            context = c;\r\n            list = l;\r\n        }\r\n\r\n        @Override\r\n        public int getCount() {\r\n            return list.size();\r\n        }\r\n\r\n        @Override\r\n        public Object getItem(int position) {\r\n            return list.get(position);\r\n        }\r\n\r\n        @Override\r\n        public long getItemId(int position) {\r\n            return position;\r\n        }\r\n\r\n        public boolean isChecked(int position) {\r\n            return list.get(position).checked;\r\n        }\r\n\r\n\r\n        @Override\r\n        public View getView(final int position, View convertView, ViewGroup parent) {\r\n            View rowView = convertView;\r\n            checkBoxState = new boolean[list.size()];\r\n            // reuse views\r\n            if (rowView == null) {\r\n                LayoutInflater inflater = ((Activity) context).getLayoutInflater();\r\n                // rowView = inflater.inflate(R.layout.pick_customer_row, null);\r\n                rowView = inflater.inflate(R.layout.offloading_truck_rows, null);\r\n\r\n                ViewHolderTruck viewHolder = new ViewHolderTruck();\r\n                //  viewHolder.icon = (ImageView) rowView.findViewById(R.id.rowImageView);\r\n                viewHolder.text = (TextView) rowView.findViewById(R.id.truck_row_productname);\r\n                viewHolder.text2 = (TextView) rowView.findViewById(R.id.truck_qty);\r\n\r\n                rowView.setTag(viewHolder);\r\n            }\r\n\r\n            final ViewHolderTruck holder = (ViewHolderTruck) rowView.getTag();\r\n            // holder.icon.setImageDrawable(list.get(position).ItemDrawable);\r\n            holder.text.setText(list.get(position).ItemString);\r\n            holder.text2.setText(list.get(position).ItemString2);\r\n\r\n            return rowView;\r\n        }\r\n\r\n        public List<Item> getList() {\r\n            return list;\r\n        }\r\n\r\n\r\n    }\r\n\r\n    List<Item> items1, itemsChecked, lineinfo, items2, items2Checked, itemsfull, lineinforemove;\r\n    ItemsListAdapter myItemsListAdapter, myItemsListAdapter2, myItemsListAdapterchecked, myItemsListAdapter2Checked;\r\n    ItemsListAdapterTruck listAdapterAddRemove, listAdapterAddRemoveRightSide;\r\n\r\n\r\n    ListView _orderdlistlines, _orderdlistlinescheckd, listviewsummary, fullviewlist, listview1, listview2;\r\n    TextView invoice_no, invoice_nosummary, setInvTotIncl, currentlocation, paymenttype;\r\n    TextView dot, calculated, cost, zero, one, price_vs_quantity, trend_header, avg_quantity, two, three, four, five, six, seven, eight, nine, backspace;\r\n    Button btndoneoffloading, closelines, closelinessummary, acceptthesummary, checkunattitems, closecash, submitcash, cash, zoom, closefullview, truckorder, cancel_order;\r\n    EditText cashfielddialog;\r\n    int len = 0;\r\n    //http://so-ca.ddns.net:8179/driver/\r\n    // String customerOrders, SERVERIP = \"http://linxsystems3.dedicated.co.za:8881/DriverGas/\",deldate,ordertype,route,InvoiceNo,priceinput,emailaddress,ts,storename;= \"http://192.168.0.18:8181/driver/\"\r\n    String customerOrders, SERVERIP, deldate, ordertype, route, InvoiceNo, priceinput, emailaddress, ts, storename;\r\n    final MyRawQueryHelper dbH = new MyRawQueryHelper(AppApplication.getAppContext());\r\n    ProgressDialog progressDoalog;\r\n    private DatabaseHelper mDatabaseHelper;\r\n    private SQLiteDatabase db;\r\n    final private int REQUEST_CODE_ASK_PERMISSIONS = 123;\r\n    private SignaturePad mNotes, cash_sig;\r\n    CheckBox accept, checkBoxacceptcash;\r\n    GPSTracker gps;\r\n    Button btndocnote, save_note, tickall, closeproductlists;\r\n    Spinner productcats_checked, productcats_nochecked, products_warehouseses, productcats_nocheckedMain, productcats_checkedMain;\r\n\r\n\r\n    double mass;\r\n    double lat = -33.966145;\r\n    double lon = 22.466218, custlat, custlon;\r\n    static double PI_RAD = Math.PI / 180.0;\r\n    private static BixolonPrinter bxlPrinter = null;\r\n\r\n    private final int REQUEST_PERMISSION = 0;\r\n    private final String DEVICE_ADDRESS_START = \" (\";\r\n    private final String DEVICE_ADDRESS_END = \")\";\r\n\r\n    private final ArrayList<CharSequence> bondedDevices = new ArrayList<>();\r\n    private ArrayAdapter<CharSequence> arrayAdapter;\r\n\r\n    private static final String TAG = \"InvoiceActivity\";\r\n    private TextView mLatitudeTextView;\r\n    private TextView mLongitudeTextView;\r\n    private GoogleApiClient mGoogleApiClient;\r\n    private Location mLocation;\r\n    private LocationManager mLocationManager;\r\n\r\n    private LocationRequest mLocationRequest;\r\n    private com.google.android.gms.location.LocationListener listener;\r\n    private long UPDATE_INTERVAL = 2 * 1000;  /* 10 secs */\r\n    private long FASTEST_INTERVAL = 2000; /* 2 sec */\r\n\r\n    private LocationManager locationManager;\r\n\r\n    /**\r\n     * Instances & Variable\r\n     */\r\n\r\n    private DatabaseAdapter databaseAdapter;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout._orderdlistlines);\r\n        AndroidNetworking.initialize(getApplicationContext());\r\n\r\n        Long tsLong = System.currentTimeMillis() / 1000;\r\n        ts = tsLong.toString();\r\n\r\n        final int ANDROID_NOUGAT = 24;\r\n        if (Build.VERSION.SDK_INT >= ANDROID_NOUGAT) {\r\n            StrictMode.ThreadPolicy policy = new StrictMode.ThreadPolicy.Builder().permitAll().build();\r\n            StrictMode.setThreadPolicy(policy);\r\n        }\r\n//        ArrayList<SettingsModel> settIP = dbH.getSettings();\r\n//\r\n//        for (SettingsModel orderAttributes : settIP) {\r\n//            SERVERIP = orderAttributes.getstrServerIp();\r\n//        }\r\n\r\n        /**\r\n         * Getting the server details:\r\n         */\r\n\r\n        databaseAdapter = new DatabaseAdapter(this);\r\n        List<IpModel> list = databaseAdapter.getServerIpModel();\r\n        if (list.size() > 0) {\r\n            SERVERIP = list.get(0).getServerIp();\r\n        } else {\r\n            SERVERIP = \"\";\r\n        }\r\n\r\n        mGoogleApiClient = new GoogleApiClient.Builder(this)\r\n                .addConnectionCallbacks(this)\r\n                .addOnConnectionFailedListener(this)\r\n                .addApi(LocationServices.API)\r\n                .build();\r\n\r\n        mLocationManager = (LocationManager) this.getSystemService(Context.LOCATION_SERVICE);\r\n\r\n        checkLocation();\r\n\r\n        invoice_no = findViewById(R.id.invoice_no);\r\n        paymenttype = findViewById(R.id.paymenttype);\r\n        setInvTotIncl = findViewById(R.id.total);\r\n        currentlocation = findViewById(R.id.currentlocation);\r\n        _orderdlistlines = findViewById(R.id._orderdlistlines);\r\n        _orderdlistlinescheckd = findViewById(R.id._orderdlistlinescheckd);\r\n        //  mSignaturePad = (SignaturePad) findViewById(R.id.signature_pad_lines);\r\n        btndoneoffloading = findViewById(R.id.acceptthesummary);\r\n        closelines = findViewById(R.id.closelines);\r\n        btndocnote = findViewById(R.id.btndocnote);\r\n        tickall = findViewById(R.id.tickall);\r\n        checkunattitems = findViewById(R.id.checkunattitems);\r\n        zoom = findViewById(R.id.zoom);\r\n        accept = findViewById(R.id.accept);\r\n        cash = findViewById(R.id.cash);\r\n        truckorder = findViewById(R.id.truckorder);\r\n        cancel_order = findViewById(R.id.cancel_order);\r\n        //products_warehouseses = (Spinner) findViewById(R.id.products_warehouseses);\r\n        productcats_nocheckedMain = findViewById(R.id.productcats_nochecked);\r\n        productcats_checkedMain = findViewById(R.id.productcats_checked);\r\n\r\n        Intent returndata = getIntent();\r\n        deldate = returndata.getStringExtra(\"deldate\");\r\n        ordertype = returndata.getStringExtra(\"ordertype\");\r\n        route = returndata.getStringExtra(\"routes\");\r\n        InvoiceNo = returndata.getStringExtra(\"invoiceno\");\r\n        invoice_no.setText(returndata.getStringExtra(\"invoiceno\"));\r\n        cash.setText(returndata.getStringExtra(\"cash\"));\r\n        final String cashPaid = returndata.getStringExtra(\"cash\");\r\n        Log.e(\"Cash Paid\", \"****************************\" + cashPaid);\r\n        setPairedDevices();\r\n\r\n        /////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n//        ArrayList<Orders> infoheader = dbH.isSaved(InvoiceNo);\r\n//        ArrayList<Orders> orderheader = dbH.returnOrderHeadersInfoByInvoice(InvoiceNo);\r\n\r\n        /**\r\n         * New Code\r\n         */\r\n        List<OrderModel> infoHeader = databaseAdapter.getOrdersByInvoice(InvoiceNo);\r\n\r\n        btndoneoffloading.setVisibility(View.INVISIBLE);\r\n\r\n        //ArrayList<WareHousesModel> ordertypeWarehouse = dbH.warehouse();\r\n        List<WareHousesModel> ordertypeWarehouse = databaseAdapter.getWareHouses();\r\n        //List<RouteModel> ordertypeWarehouse = databaseAdapter.getRoutes();\r\n\r\n        List<String> labelsWare = new ArrayList<String>();\r\n        labelsWare.add(\"ALL\");\r\n        for (WareHousesModel orderAttributes4 : ordertypeWarehouse) {\r\n            labelsWare.add(orderAttributes4.getWareHouse());\r\n        }\r\n\r\n        //Putting the warehouse into Spinner:\r\n\r\n        final ArrayAdapter<String> ordertypeAWare =\r\n                new ArrayAdapter<String>(InvoiceDetails.this,\r\n                        android.R.layout.simple_spinner_item, labelsWare);\r\n\r\n\r\n//        ArrayAdapter<WareHousesModel> ordertypeAWare = new ArrayAdapter<WareHousesModel>(InvoiceDetails.this,\r\n//                android.R.layout.simple_spinner_item, ordertypeWarehouse);\r\n        ordertypeAWare.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\r\n        //products_warehouseses.setAdapter(ordertypeAWare);\r\n        productcats_nocheckedMain.setAdapter(ordertypeAWare);\r\n        productcats_checkedMain.setAdapter(ordertypeAWare);\r\n\r\n        //////////////////////////////       Left Side Spinner        /////////////////////////////////////////////////////////////////\r\n        productcats_nocheckedMain.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {\r\n            @Override\r\n            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {\r\n                //ArrayList<OrderLinesModel> oD = dbH.returnOrderLinesoffloadedByCategory(InvoiceNo, productcats_nocheckedMain.getSelectedItem().toString());\r\n                List<OrderLinesModel> oD = databaseAdapter.returnOrderLinesOffloadedByCategory(InvoiceNo, productcats_nocheckedMain.getSelectedItem().toString());\r\n                Log.e(\"group\", productcats_nocheckedMain.getSelectedItem().toString());\r\n                items1 = new ArrayList<Item>();\r\n                //  itemsChecked = new ArrayList<Item>();\r\n\r\n                for (OrderLinesModel orderAttributes : oD) {\r\n\r\n                    if (orderAttributes.getBlnoffloaded() == 0) {\r\n                        Item item = new Item(orderAttributes.getPastelDescription(), \"\" + orderAttributes.getPrice(), \"\" + orderAttributes.getQty(),\r\n                                \"\", \"Return: \" + orderAttributes.getReturnQty(), \"Lines\", \"\" + orderAttributes.getBlnoffloaded(), \"\" + orderAttributes.getOrderDetailId());\r\n                        items1.add(item);\r\n                    }\r\n                    /*if(orderAttributes.getblnoffloaded() ==\"1\")\r\n                    {\r\n                        Item item = new Item(orderAttributes.getPastelDescription(), orderAttributes.getPrice(),orderAttributes.getQty(),\r\n                                \"\",orderAttributes.getreturnQty(),\"Lines\",orderAttributes.getblnoffloaded(),orderAttributes.getOrderDetailId());\r\n                        itemsChecked.add(item);\r\n                    }*/\r\n\r\n                }\r\n\r\n                myItemsListAdapter = new ItemsListAdapter(InvoiceDetails.this, items1);\r\n                // myItemsListAdapterchecked = new ItemsListAdapter(InvoiceDetails.this, itemsChecked);\r\n                _orderdlistlines.setAdapter(myItemsListAdapter);\r\n                //  _orderdlistlinescheckd.setAdapter(myItemsListAdapterchecked);\r\n\r\n            }\r\n\r\n            @Override\r\n            public void onNothingSelected(AdapterView<?> parent) {\r\n            }\r\n        });\r\n\r\n        //////////////////////////////       Right Side Spinner        /////////////////////////////////////////////////////////////////\r\n        productcats_checkedMain.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {\r\n            @Override\r\n            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {\r\n                //ArrayList<OrderLines> oD = dbH.returnOrderLinesoffloadedByCategory(InvoiceNo, productcats_checkedMain.getSelectedItem().toString());\r\n                List<OrderLinesModel> oD = databaseAdapter.returnOrderLinesOffloadedByCategory(InvoiceNo, productcats_checkedMain.getSelectedItem().toString());\r\n                Log.e(\"group\", productcats_checkedMain.getSelectedItem().toString());\r\n                //  items1 = new ArrayList<Item>();\r\n                itemsChecked = new ArrayList<Item>();\r\n                for (OrderLinesModel orderAttributes : oD) {\r\n\r\n                    if (orderAttributes.getBlnoffloaded() == 1) {\r\n                        Item item = new Item(orderAttributes.getPastelDescription(), \"\" + orderAttributes.getPrice(), \"\" + orderAttributes.getQty(),\r\n                                \"\", \"Return: \" + orderAttributes.getReturnQty(), \"Lines\", \"\" + orderAttributes.getBlnoffloaded(), \"\" + orderAttributes.getOrderDetailId());\r\n                        itemsChecked.add(item);\r\n                    }\r\n\r\n\r\n                }\r\n\r\n                // myItemsListAdapter = new ItemsListAdapter(InvoiceDetails.this, items1);\r\n                myItemsListAdapterchecked = new ItemsListAdapter(InvoiceDetails.this, itemsChecked);\r\n\r\n                _orderdlistlinescheckd.setAdapter(myItemsListAdapterchecked);\r\n                //_orderdlistlines.setAdapter(myItemsListAdapter);\r\n\r\n            }\r\n\r\n            @Override\r\n            public void onNothingSelected(AdapterView<?> parent) {\r\n            }\r\n        });\r\n        //order headers\r\n        for (OrderModel orderAttributes : infoHeader) {\r\n\r\n            if (orderAttributes.getOffloaded() == 1) {\r\n                accept.setChecked(true);\r\n                //mSignaturePad.setVisibility(View.INVISIBLE);\r\n                btndocnote.setVisibility(View.INVISIBLE);\r\n            } else {\r\n                accept.setChecked(false);\r\n            }\r\n            cash.setText(orderAttributes.getCashPaid());\r\n        }\r\n//        for (Orders orderAttributes : orderheader) {\r\n//            emailaddress = orderAttributes.getstrEmailCustomer();\r\n//            invoice_no.setText(orderAttributes.getInvoiceNo() + \"( \" + orderAttributes.getStoreName() + \")\");\r\n//            storename = orderAttributes.getStoreName();\r\n//            setInvTotIncl.setText(orderAttributes.getInvTotIncl());\r\n//            paymenttype.setText(orderAttributes.getPaymentType());\r\n//            // total = orderAttributes.getInvTotIncl();\r\n//        }\r\n\r\n        //New code:\r\n        for (OrderModel orderAttributes : infoHeader) {\r\n            emailaddress = orderAttributes.getStrEmailCustomer();\r\n            invoice_no.setText(orderAttributes.getInvoiceNo() + \"( \" + orderAttributes.getStoreName() + \")\");\r\n            storename = orderAttributes.getStoreName();\r\n            setInvTotIncl.setText(orderAttributes.getInvTotIncl());\r\n            //paymenttype.setText(orderAttributes.getPaymentType());\r\n            paymenttype.setText(\"CASH\");\r\n            // total = orderAttributes.getInvTotIncl();\r\n        }\r\n\r\n\r\n        ArrayList<OrderLines> oD = dbH.returnOrderLines(returndata.getStringExtra(\"invoiceno\"));\r\n        Log.e(\"Cas invoi\", \"****************************++++++++++++++++++++++++++++++++++++++++++++++++++++++\" + returndata.getStringExtra(\"invoiceno\"));\r\n        items1 = new ArrayList<Item>();\r\n        itemsChecked = new ArrayList<Item>();\r\n\r\n        for (OrderLines orderAttributes : oD) {\r\n\r\n            if (orderAttributes.getblnoffloaded().equals(\"0\")) {\r\n\r\n                Item item = new Item(orderAttributes.getPastelDescription(), orderAttributes.getPrice(), orderAttributes.getQty(),\r\n                        \"\", \"Return: \" + orderAttributes.getreturnQty(), \"Lines\", orderAttributes.getblnoffloaded(), orderAttributes.getOrderDetailId());\r\n                items1.add(item);\r\n                Log.e(\"items1\", \"\" + items1);\r\n            }\r\n            if (orderAttributes.getblnoffloaded().equals(\"1\")) {\r\n\r\n                Item item = new Item(orderAttributes.getPastelDescription(), orderAttributes.getPrice(), orderAttributes.getQty(),\r\n                        \"\", \"Return: \" + orderAttributes.getreturnQty(), \"Lines\", orderAttributes.getblnoffloaded(), orderAttributes.getOrderDetailId());\r\n                itemsChecked.add(item);\r\n                Log.e(\"itemsChecked\", \"\" + itemsChecked);\r\n            }\r\n\r\n        }\r\n\r\n        Log.e(\"items1\", \"\" + items1);\r\n        Log.e(\"itemsChecked\", \"\" + itemsChecked);\r\n        myItemsListAdapter = new ItemsListAdapter(InvoiceDetails.this, items1);\r\n        myItemsListAdapterchecked = new ItemsListAdapter(InvoiceDetails.this, itemsChecked);\r\n\r\n        _orderdlistlinescheckd.setAdapter(myItemsListAdapterchecked);\r\n        _orderdlistlines.setAdapter(myItemsListAdapter);\r\n\r\n       /* products_warehouseses.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {\r\n            @Override\r\n            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {\r\n\r\n                ArrayList<OrderLines> oD = dbH.returnOrderLinesoffloadedByCategory(InvoiceNo,products_warehouseses.getSelectedItem().toString());\r\n                items1 = new ArrayList<Item>();\r\n                itemsChecked = new ArrayList<Item>();\r\n\r\n                for (OrderLines orderAttributes: oD){\r\n\r\n                    Log.e(\"ontheitem\",\"////////////////////////////\"+orderAttributes.getblnoffloaded());\r\n\r\n\r\n                        Item item = new Item(orderAttributes.getPastelDescription(), orderAttributes.getPrice(),orderAttributes.getQty(),\r\n                                \"\",orderAttributes.getreturnQty(),\"Lines\",orderAttributes.getblnoffloaded(),orderAttributes.getOrderDetailId());\r\n                        items1.add(item);\r\n\r\n\r\n                }\r\n                myItemsListAdapter = new ItemsListAdapter(InvoiceDetails.this, items1);\r\n\r\n                _orderdlistlines.setAdapter(myItemsListAdapter);\r\n\r\n            }\r\n\r\n            @Override\r\n            public void onNothingSelected(AdapterView<?> parent) {\r\n\r\n            }\r\n        });*/\r\n\r\n\r\n        zoom.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                final Dialog dialogfull = new Dialog(InvoiceDetails.this, android.R.style.Theme_Material_Light_NoActionBar_Fullscreen);\r\n                dialogfull.setContentView(R.layout.orderlinesfullscreen);\r\n\r\n                dialogfull.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);\r\n\r\n                ArrayList<OrderLines> oD = dbH.returnOrderLinesoffloaded(InvoiceNo);\r\n                itemsfull = new ArrayList<Item>();\r\n\r\n                for (OrderLines orderAttributes : oD) {\r\n\r\n                    Log.e(\"ontheitem\", \"////////////////////////////\" + orderAttributes.getblnoffloaded());\r\n                    Item item = new Item(orderAttributes.getPastelDescription(), orderAttributes.getPrice(), orderAttributes.getQty(),\r\n                            \"\", \"Return: \" + orderAttributes.getreturnQty(), \"Lines\", orderAttributes.getblnoffloaded(), orderAttributes.getOrderDetailId());\r\n                    itemsfull.add(item);\r\n\r\n                }\r\n                myItemsListAdapter2 = new ItemsListAdapter(InvoiceDetails.this, itemsfull);\r\n                fullviewlist = (ListView) dialogfull.findViewById(R.id.fullviewlist);\r\n                closefullview = (Button) dialogfull.findViewById(R.id.closefullview);\r\n\r\n                fullviewlist.setAdapter(myItemsListAdapter2);\r\n                closefullview.setOnClickListener(new View.OnClickListener() {\r\n                    @Override\r\n                    public void onClick(View v) {\r\n\r\n                        ArrayList<OrderLines> oD = dbH.returnOrderLines(InvoiceNo);\r\n                        items1 = new ArrayList<Item>();\r\n\r\n                        for (OrderLines orderAttributes : oD) {\r\n\r\n                            Log.e(\"ontheitem\", \"////////////////////////////\" + orderAttributes.getblnoffloaded());\r\n                            Item item = new Item(orderAttributes.getPastelDescription(), orderAttributes.getPrice(), orderAttributes.getQty(),\r\n                                    \"\", \"Return: \" + orderAttributes.getreturnQty(), \"Lines\", orderAttributes.getblnoffloaded(), orderAttributes.getOrderDetailId());\r\n                            items1.add(item);\r\n\r\n                        }\r\n                        myItemsListAdapter = new ItemsListAdapter(InvoiceDetails.this, items1);\r\n                        _orderdlistlines.setAdapter(myItemsListAdapter);\r\n                        myItemsListAdapter.notifyDataSetChanged();\r\n                        dialogfull.dismiss();\r\n                    }\r\n                });\r\n                dialogfull.show();\r\n\r\n                fullviewlist.setOnItemLongClickListener(new AdapterView.OnItemLongClickListener() {\r\n                    @Override\r\n                    public boolean onItemLongClick(AdapterView<?> parent, View view, int position, long id) {\r\n\r\n                        final Item selectedItem_line = (Item) (parent.getItemAtPosition(position));\r\n\r\n                        Intent lineEdit = new Intent(InvoiceDetails.this, LineEdit.class);\r\n\r\n                        lineEdit.putExtra(\"deldate\", deldate);\r\n                        lineEdit.putExtra(\"routes\", route);\r\n                        lineEdit.putExtra(\"ordertype\", ordertype);\r\n                        lineEdit.putExtra(\"orderdetailId\", selectedItem_line.ItemString8);\r\n                        lineEdit.putExtra(\"invoiceno\", InvoiceNo);\r\n                        startActivity(lineEdit);\r\n                        return true;\r\n                    }\r\n                });\r\n            }\r\n        });\r\n\r\n        truckorder.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                final Dialog dialogLists = new Dialog(InvoiceDetails.this, android.R.style.Theme_Material_Light_NoActionBar_Fullscreen);\r\n                dialogLists.setContentView(R.layout.products_listview);\r\n\r\n                dialogLists.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);\r\n\r\n                ArrayList<OrderLines> oD = dbH.returnOrderLinesoffloaded(InvoiceNo);\r\n                lineinfo = new ArrayList<Item>();\r\n                lineinforemove = new ArrayList<Item>();\r\n\r\n                for (OrderLines orderAttributes : oD) {\r\n\r\n                    Item item = new Item(orderAttributes.getPastelDescription(), orderAttributes.getPrice(), orderAttributes.getQty(),\r\n                            \"\", \"Return: \" + orderAttributes.getreturnQty(), \"Lines\", orderAttributes.getblnoffloaded(), orderAttributes.getOrderDetailId());\r\n                    lineinfo.add(item);\r\n                }\r\n                listAdapterAddRemove = new ItemsListAdapterTruck(InvoiceDetails.this, lineinfo);\r\n                listAdapterAddRemoveRightSide = new ItemsListAdapterTruck(InvoiceDetails.this, lineinforemove);\r\n                productcats_nochecked = (Spinner) dialogLists.findViewById(R.id.productcats_nochecked);\r\n                productcats_checked = (Spinner) dialogLists.findViewById(R.id.productcats_checked);\r\n                listview1 = (ListView) dialogLists.findViewById(R.id.listview1);\r\n                listview2 = (ListView) dialogLists.findViewById(R.id.listview2);\r\n                closeproductlists = (Button) dialogLists.findViewById(R.id.closeproductlists);\r\n\r\n                listview1.setAdapter(listAdapterAddRemove);\r\n                listview2.setAdapter(listAdapterAddRemoveRightSide);\r\n                listview1.setOnItemClickListener(new AdapterView.OnItemClickListener() {\r\n                    @Override\r\n                    public void onItemClick(AdapterView<?> parent, View view, int position, long id) {\r\n                        Item selectedItem = (Item) (parent.getItemAtPosition(position));\r\n\r\n                        ItemsListAdapterTruck associatedAdapter = (ItemsListAdapterTruck) (parent.getAdapter());\r\n                        List<Item> associatedList = associatedAdapter.getList();\r\n                        Item associatedItem = associatedList.get(position);\r\n                        if (removeItemToList(associatedList, associatedItem)) {\r\n\r\n                            dbH.updateDeals(\"Update OrderLines set blnTruckchecked = 1 where OrderDetailId='\" + selectedItem.ItemString8.toString() + \"'\");\r\n                            view.invalidate();\r\n                            associatedAdapter.notifyDataSetChanged();\r\n\r\n                            ItemsListAdapterTruck list2Adapter = (ItemsListAdapterTruck) (listview2.getAdapter());\r\n                            List<Item> list2List = list2Adapter.getList();\r\n\r\n                            addItemToList(list2List, selectedItem);\r\n                            list2Adapter.notifyDataSetChanged();\r\n                        }\r\n                    }\r\n                });\r\n                listview2.setOnItemClickListener(new AdapterView.OnItemClickListener() {\r\n                    @Override\r\n                    public void onItemClick(AdapterView<?> parent, View view, int position, long id) {\r\n                        Item selectedItem = (Item) (parent.getItemAtPosition(position));\r\n\r\n                        ItemsListAdapterTruck associatedAdapter = (ItemsListAdapterTruck) (parent.getAdapter());\r\n                        List<Item> associatedList = associatedAdapter.getList();\r\n                        Item associatedItem = associatedList.get(position);\r\n                        if (removeItemToList(associatedList, associatedItem)) {\r\n\r\n                            dbH.updateDeals(\"Update OrderLines set blnTruckchecked = 0 where OrderDetailId='\" + selectedItem.ItemString8.toString() + \"'\");\r\n\r\n                            view.invalidate();\r\n                            associatedAdapter.notifyDataSetChanged();\r\n\r\n                            ItemsListAdapterTruck list2Adapter = (ItemsListAdapterTruck) (listview1.getAdapter());\r\n                            List<Item> list2List = list2Adapter.getList();\r\n\r\n                            addItemToList(list2List, selectedItem);\r\n                            list2Adapter.notifyDataSetChanged();\r\n                        }\r\n                    }\r\n                });\r\n                closeproductlists.setOnClickListener(new View.OnClickListener() {\r\n                    @Override\r\n                    public void onClick(View v) {\r\n\r\n                       /* ArrayList<OrderLines> oD= dbH.returnOrderLines(InvoiceNo);\r\n                        items1 = new ArrayList<Item>();\r\n\r\n                        for (OrderLines orderAttributes: oD){\r\n\r\n                            Log.e(\"ontheitem\",\"////////////////////////////\"+orderAttributes.getblnoffloaded());\r\n                            Item item = new Item(orderAttributes.getPastelDescription(), orderAttributes.getPrice(),orderAttributes.getQty(),\r\n                                    \"\",orderAttributes.getreturnQty(),\"Lines\",orderAttributes.getblnoffloaded(),orderAttributes.getOrderDetailId());\r\n                            items1.add(item);\r\n\r\n                        }\r\n                        myItemsListAdapter = new ItemsListAdapter(InvoiceDetails.this, items1);\r\n                        _orderdlistlines.setAdapter(myItemsListAdapter);*/\r\n                        listAdapterAddRemove.notifyDataSetChanged();\r\n                        dialogLists.dismiss();\r\n                    }\r\n                });\r\n                productcats_nochecked.setAdapter(ordertypeAWare);\r\n                productcats_checked.setAdapter(ordertypeAWare);\r\n                productcats_nochecked.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {\r\n                    @Override\r\n                    public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {\r\n                        ArrayList<OrderLines> oD = dbH.returnOrderLinesoffloadedByCategory(InvoiceNo, productcats_nochecked.getSelectedItem().toString());\r\n                        Log.e(\"group\", productcats_nochecked.getSelectedItem().toString());\r\n                        lineinfo = new ArrayList<Item>();\r\n                        lineinforemove = new ArrayList<Item>();\r\n\r\n                        for (OrderLines orderAttributes : oD) {\r\n\r\n                            Item item = new Item(orderAttributes.getPastelDescription(), orderAttributes.getPrice(), orderAttributes.getQty(),\r\n                                    \"\", \"Return: \" + orderAttributes.getreturnQty(), \"Lines\", orderAttributes.getblnoffloaded(), orderAttributes.getOrderDetailId());\r\n                            lineinfo.add(item);\r\n                        }\r\n                        listAdapterAddRemove = new ItemsListAdapterTruck(InvoiceDetails.this, lineinfo);\r\n                        listview1.setAdapter(listAdapterAddRemove);\r\n                    }\r\n\r\n                    @Override\r\n                    public void onNothingSelected(AdapterView<?> parent) {\r\n                    }\r\n                });\r\n                dialogLists.show();\r\n            }\r\n        });\r\n\r\n\r\n        _orderdlistlines.setOnItemClickListener(new AdapterView.OnItemClickListener() {\r\n            @Override\r\n            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {\r\n                Item selectedItem = (Item) (parent.getItemAtPosition(position));\r\n\r\n                ItemsListAdapter associatedAdapter = (ItemsListAdapter) (parent.getAdapter());\r\n                List<Item> associatedList = associatedAdapter.getList();\r\n                Item associatedItem = associatedList.get(position);\r\n                if (removeItemToList(associatedList, associatedItem)) {\r\n\r\n                    dbH.updateDeals(\"Update OrderLines set blnoffloaded=1,Uploaded=0 Where OrderDetailId='\" + selectedItem.ItemString8.toString() + \"'\");\r\n                    view.invalidate();\r\n                    associatedAdapter.notifyDataSetChanged();\r\n\r\n                    ItemsListAdapter list2Adapter = (ItemsListAdapter) (_orderdlistlinescheckd.getAdapter());\r\n                    List<Item> list2List = list2Adapter.getList();\r\n\r\n                    addItemToList(list2List, selectedItem);\r\n                    list2Adapter.notifyDataSetChanged();\r\n                    _orderdlistlinescheckd.smoothScrollToPosition(list2Adapter.getCount());\r\n                }\r\n            }\r\n        });\r\n\r\n        _orderdlistlinescheckd.setOnItemClickListener(new AdapterView.OnItemClickListener() {\r\n            @Override\r\n            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {\r\n                Item selectedItem = (Item) (parent.getItemAtPosition(position));\r\n\r\n                ItemsListAdapter associatedAdapter = (ItemsListAdapter) (parent.getAdapter());\r\n                List<Item> associatedList = associatedAdapter.getList();\r\n                Item associatedItem = associatedList.get(position);\r\n                if (removeItemToList(associatedList, associatedItem)) {\r\n\r\n                    dbH.updateDeals(\"Update OrderLines set blnoffloaded=0,Uploaded=0 Where OrderDetailId='\" + selectedItem.ItemString8.toString() + \"'\");\r\n\r\n                    view.invalidate();\r\n                    associatedAdapter.notifyDataSetChanged();\r\n\r\n                    ItemsListAdapter list2Adapter = (ItemsListAdapter) (_orderdlistlines.getAdapter());\r\n                    List<Item> list2List = list2Adapter.getList();\r\n\r\n                    addItemToList(list2List, selectedItem);\r\n                    list2Adapter.notifyDataSetChanged();\r\n                    _orderdlistlines.smoothScrollToPosition(list2Adapter.getCount());\r\n                }\r\n            }\r\n        });\r\n        tickall.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                dbH.updateDeals(\"Update OrderLines set blnoffloaded = 1 where OrderID='\" + InvoiceNo + \"'\");\r\n                Intent doc = new Intent(InvoiceDetails.this, InvoiceDetails.class);\r\n                doc.putExtra(\"invoiceno\", InvoiceNo);\r\n                doc.putExtra(\"deldate\", deldate);\r\n                doc.putExtra(\"ordertype\", ordertype);\r\n                doc.putExtra(\"routes\", route);\r\n                doc.putExtra(\"cash\", cashPaid);\r\n                startActivity(doc);\r\n            }\r\n        });\r\n\r\n        cash.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                final Dialog dialog = new Dialog(InvoiceDetails.this, android.R.style.Theme_Light_NoTitleBar);\r\n                dialog.setContentView(R.layout.number_pick_with_delete);\r\n\r\n      /*  TextView textView = new TextView(context);\r\n        textView.setText();*/\r\n                dialog.setTitle(\"Please Type in the Cash\");\r\n                dialog.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);\r\n                cashfielddialog = (EditText) dialog.findViewById(R.id.password_field);\r\n                cashfielddialog.setText(cash.getText().toString());\r\n                // mPasswordField.setText(\"1\");\r\n                zero = (TextView) dialog.findViewById(R.id.t9_key_0);\r\n                one = (TextView) dialog.findViewById(R.id.t9_key_1);\r\n                two = (TextView) dialog.findViewById(R.id.t9_key_2);\r\n                three = (TextView) dialog.findViewById(R.id.t9_key_3);\r\n                four = (TextView) dialog.findViewById(R.id.t9_key_4);\r\n                five = (TextView) dialog.findViewById(R.id.t9_key_5);\r\n                six = (TextView) dialog.findViewById(R.id.t9_key_6);\r\n                seven = (TextView) dialog.findViewById(R.id.t9_key_7);\r\n                eight = (TextView) dialog.findViewById(R.id.t9_key_8);\r\n                nine = (TextView) dialog.findViewById(R.id.t9_key_9);\r\n                dot = (TextView) dialog.findViewById(R.id.t9_key_dot);\r\n                submitcash = (Button) dialog.findViewById(R.id.accept);\r\n                closecash = (Button) dialog.findViewById(R.id.close);\r\n                backspace = (TextView) dialog.findViewById(R.id.t9_key_backspace);\r\n                cash_sig = (SignaturePad) dialog.findViewById(R.id.cash_sig);\r\n                checkBoxacceptcash = (CheckBox) dialog.findViewById(R.id.checkBoxacceptcash);\r\n\r\n                zero.setOnClickListener(new View.OnClickListener() {\r\n                    @Override\r\n                    public void onClick(View v) {\r\n                        cashfielddialog.append(((TextView) v).getText());\r\n                    }\r\n                });\r\n                one.setOnClickListener(InvoiceDetails.this);\r\n                two.setOnClickListener(InvoiceDetails.this);\r\n                three.setOnClickListener(InvoiceDetails.this);\r\n                four.setOnClickListener(InvoiceDetails.this);\r\n                five.setOnClickListener(InvoiceDetails.this);\r\n                six.setOnClickListener(InvoiceDetails.this);\r\n                seven.setOnClickListener(InvoiceDetails.this);\r\n                eight.setOnClickListener(InvoiceDetails.this);\r\n                nine.setOnClickListener(InvoiceDetails.this);\r\n                backspace.setOnClickListener(InvoiceDetails.this);\r\n\r\n                dot.setOnClickListener(new View.OnClickListener() {\r\n                    @Override\r\n                    public void onClick(View v) {\r\n                        if (cashfielddialog.getText().toString().contains(\".\")) {\r\n                            Toast.makeText(getBaseContext(), \"You cannot type in a DOT(.) multiple times\", Toast.LENGTH_SHORT).show();\r\n                        } else {\r\n                            cashfielddialog.setText(cashfielddialog.getText() + \".\");\r\n                        }\r\n\r\n                    }\r\n                });\r\n                closecash.setOnClickListener(new View.OnClickListener() {\r\n                    @Override\r\n                    public void onClick(View v) {\r\n\r\n                        if (checkBoxacceptcash.isChecked()) {\r\n                            if ((cashfielddialog.getText().toString()) != null) {\r\n                                cash.setText(cashfielddialog.getText().toString());\r\n                            } else {\r\n                                cash.setText(\"0.0\");\r\n                            }\r\n\r\n                            dbH.updateDeals(\"Update OrderHeaders set CashPaid='\" + cashfielddialog.getText().toString() + \"' where InvoiceNo='\" + InvoiceNo + \"'\");\r\n                            Calendar calendar = Calendar.getInstance();\r\n                            calendar.add(Calendar.DAY_OF_YEAR, 0);\r\n                            Date tomorrow = calendar.getTime();\r\n\r\n                            DateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd:hh:mm\");\r\n                            String tomorrowDate = dateFormat.format(tomorrow);\r\n\r\n                            dbH.updateDeals(\"Insert into ManagementConsole (Messages,DocID,datetimes) values('\" + cashfielddialog.getText().toString() + \" Collected','\" + InvoiceNo + \"','\" + tomorrowDate + \"')\");\r\n                            dialog.dismiss();\r\n\r\n\r\n                            Bitmap signatureBitmap = cash_sig.getSignatureBitmap();\r\n                            //new UploadImage(signatureBitmap,IDs).execute();\r\n                            //new MainActivity.UploadImage(signatureBitmap,selectedItem.ItemString3,lat,lon, tomorrowDate).execute();\r\n                            if (addSignatureJpg(signatureBitmap, InvoiceNo)) {\r\n\r\n                                Toast.makeText(InvoiceDetails.this, \"Signature saved into the Gallery\", Toast.LENGTH_SHORT).show();\r\n                            } else {\r\n                                Toast.makeText(InvoiceDetails.this, \"Unable to store the signature\", Toast.LENGTH_SHORT).show();\r\n                            }\r\n\r\n                        } else {\r\n                            AlertDialog.Builder builder = new AlertDialog.Builder(InvoiceDetails.this);\r\n                            builder\r\n                                    .setTitle(\"Cash Acceptance \")\r\n                                    .setMessage(\"Please Accept that you are collection cash\")\r\n                                    .setIcon(android.R.drawable.ic_dialog_alert)\r\n                                    .setPositiveButton(\"CLOSE\", new DialogInterface.OnClickListener() {\r\n                                        public void onClick(DialogInterface dialog, int which) {\r\n\r\n                                        }\r\n                                    })\r\n                                    .show();\r\n                        }\r\n                    }\r\n                });\r\n\r\n\r\n                dialog.show();\r\n            }\r\n        });\r\n\r\n        btndocnote.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                Intent doc = new Intent(InvoiceDetails.this, DocumentNotes.class);\r\n                doc.putExtra(\"invoiceno\", InvoiceNo);\r\n                doc.putExtra(\"deldate\", deldate);\r\n                doc.putExtra(\"ordertype\", ordertype);\r\n                doc.putExtra(\"routes\", route);\r\n                doc.putExtra(\"cash\", cashPaid);\r\n                startActivity(doc);\r\n\r\n\r\n            }\r\n        });\r\n\r\n        btndoneoffloading.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n\r\n                log.e(\"*****\", \"latlon********++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\" + lat + \",\" + lon);\r\n                log.e(\"*****\", \"cash  cash********++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\" + (cash.getText().toString()).length());\r\n                if (accept.isChecked() && ((cash.getText().toString()).trim() != null && (cash.getText().toString()).length() > 0)) {\r\n                    checkLocation();\r\n                    //need to remove test this\r\n                    dbH.updateDeals(\"Update OrderHeaders set CashPaid='\" + cash.getText().toString() + \"', Latitude=\" + lat + \", Longitude=\" + lon + \" where InvoiceNo ='\" + InvoiceNo + \"'\");\r\n\r\n                    Intent main = new Intent(InvoiceDetails.this, SignaturePage.class);\r\n                    main.putExtra(\"deldate\", deldate);\r\n                    main.putExtra(\"routes\", route);\r\n                    main.putExtra(\"ordertype\", ordertype);\r\n                    main.putExtra(\"invoiceno\", InvoiceNo);\r\n                    main.putExtra(\"cash\", cashPaid);\r\n                    main.putExtra(\"emailaddress\", emailaddress);\r\n                    main.putExtra(\"storename\", storename);\r\n\r\n                    startActivity(main);\r\n\r\n\r\n                } else {\r\n                    AlertDialog.Builder builder = new AlertDialog.Builder(InvoiceDetails.this);\r\n                    builder\r\n                            .setTitle(\"Check box \")\r\n                            .setMessage(\"Please make sure cash box is not empty and all items are ticked \")\r\n                            .setIcon(android.R.drawable.ic_dialog_alert)\r\n                            .setPositiveButton(\"OKAY\", new DialogInterface.OnClickListener() {\r\n                                public void onClick(DialogInterface dialog, int which) {\r\n\r\n                                }\r\n                            })\r\n                            .show();\r\n                }\r\n\r\n            }\r\n        });\r\n        closelines.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n\r\n                AlertDialog.Builder builder = new AlertDialog.Builder(InvoiceDetails.this);\r\n                builder\r\n                        .setTitle(\"Are you? \")\r\n                        .setMessage(\"This will not save any changes made\")\r\n                        .setIcon(android.R.drawable.ic_dialog_alert)\r\n                        .setPositiveButton(\"OKAY\", new DialogInterface.OnClickListener() {\r\n                            public void onClick(DialogInterface dialog, int which) {\r\n                                Intent main = new Intent(InvoiceDetails.this, MainActivity.class);\r\n                                main.putExtra(\"deldate\", deldate);\r\n                                main.putExtra(\"routes\", route);\r\n                                main.putExtra(\"ordertype\", ordertype);\r\n                                //main.putExtra(\"orderdetailid\",ordertype);\r\n                                //\r\n                                startActivity(main);\r\n                            }\r\n                        })\r\n                        .setNegativeButton(\"CANCEL\", new DialogInterface.OnClickListener() {\r\n                            public void onClick(DialogInterface dialog, int which) {\r\n                                dialog.dismiss();\r\n                            }\r\n                        })\r\n                        .show();\r\n\r\n            }\r\n        });\r\n\r\n        _orderdlistlines.setOnItemLongClickListener(new AdapterView.OnItemLongClickListener() {\r\n            @Override\r\n            public boolean onItemLongClick(AdapterView<?> parent, View view, int position, long id) {\r\n\r\n                final Item selectedItem_line = (Item) (parent.getItemAtPosition(position));\r\n\r\n                Intent lineEdit = new Intent(InvoiceDetails.this, LineEdit.class);\r\n\r\n                lineEdit.putExtra(\"deldate\", deldate);\r\n                lineEdit.putExtra(\"routes\", route);\r\n                lineEdit.putExtra(\"ordertype\", ordertype);\r\n                lineEdit.putExtra(\"orderdetailId\", selectedItem_line.ItemString8);\r\n                lineEdit.putExtra(\"invoiceno\", InvoiceNo);\r\n                startActivity(lineEdit);\r\n                return true;\r\n            }\r\n        });\r\n\r\n\r\n        accept.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                CheckBox cb = (CheckBox) v;\r\n                Toast.makeText(getApplicationContext(), \"Clicked on Checkbox: \" + cb.getText() + \" is \" + cb.isChecked(),\r\n                        Toast.LENGTH_LONG).show();\r\n                Log.e(\"boolean*\", \"*******************************************\" + dbH.isoffladedline(InvoiceNo));\r\n                if (dbH.isoffladedline(InvoiceNo) == false) {\r\n                    final Dialog dialog = new Dialog(InvoiceDetails.this, android.R.style.Theme_Material_Light_NoActionBar_Fullscreen);\r\n                    dialog.setContentView(R.layout.summarry);\r\n\r\n                    dialog.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);\r\n\r\n                    ArrayList<OrderLines> oD = dbH.returnOrderLinesoffloaded(InvoiceNo);\r\n                    items2 = new ArrayList<Item>();\r\n\r\n                    for (OrderLines orderAttributes : oD) {\r\n\r\n                        Log.e(\"ontheitem\", \"////////////////////////////\" + orderAttributes.getblnoffloaded());\r\n                        Item item = new Item(orderAttributes.getPastelDescription(), orderAttributes.getPrice(), orderAttributes.getQty(),\r\n                                \"\", \"1\", \"Lines\", orderAttributes.getblnoffloaded(), orderAttributes.getOrderDetailId());\r\n                        items2.add(item);\r\n                    }\r\n                    myItemsListAdapter2 = new ItemsListAdapter(InvoiceDetails.this, items2);\r\n                    listviewsummary = (ListView) dialog.findViewById(R.id._orderdlistlines);\r\n                    invoice_nosummary = (TextView) dialog.findViewById(R.id.invoice_no);\r\n                    closelinessummary = (Button) dialog.findViewById(R.id.closelines);\r\n                    acceptthesummary = (Button) dialog.findViewById(R.id.acceptthesummary);\r\n                    listviewsummary.setAdapter(myItemsListAdapter2);\r\n                    closelinessummary.setOnClickListener(new View.OnClickListener() {\r\n                        @Override\r\n                        public void onClick(View v) {\r\n                            dialog.dismiss();\r\n                        }\r\n                    });\r\n                    closelinessummary.setOnClickListener(new View.OnClickListener() {\r\n                        @Override\r\n                        public void onClick(View v) {\r\n                            dialog.dismiss();\r\n                        }\r\n                    });\r\n                    acceptthesummary.setOnClickListener(new View.OnClickListener() {\r\n                        @Override\r\n                        public void onClick(View v) {\r\n                            Log.e(\"this\", \"++++++++++++++++++++++++++++++++++++****************************l\");\r\n                            Intent b = new Intent(InvoiceDetails.this, InvoiceDetails.class);\r\n                            b.putExtra(\"deldate\", deldate);\r\n                            b.putExtra(\"routes\", route);\r\n                            b.putExtra(\"ordertype\", ordertype);\r\n                            b.putExtra(\"invoiceno\", InvoiceNo);\r\n                            b.putExtra(\"cash\", cash.getText().toString());\r\n                            startActivity(b);\r\n                        }\r\n                    });\r\n                    listviewsummary.setOnItemLongClickListener(new AdapterView.OnItemLongClickListener() {\r\n                        @Override\r\n                        public boolean onItemLongClick(AdapterView<?> parent, View view, int position, long id) {\r\n\r\n                            final Item selectedItem_line = (Item) (parent.getItemAtPosition(position));\r\n\r\n                            Intent lineEdit = new Intent(InvoiceDetails.this, LineEdit.class);\r\n\r\n                            lineEdit.putExtra(\"deldate\", deldate);\r\n                            lineEdit.putExtra(\"routes\", route);\r\n                            lineEdit.putExtra(\"ordertype\", ordertype);\r\n                            lineEdit.putExtra(\"orderdetailId\", selectedItem_line.ItemString8);\r\n                            lineEdit.putExtra(\"invoiceno\", InvoiceNo);\r\n                            startActivity(lineEdit);\r\n                            return true;\r\n                        }\r\n                    });\r\n                    dialog.show();\r\n                    accept.setChecked(false);\r\n                    btndoneoffloading.setVisibility(View.INVISIBLE);\r\n                } else {\r\n                    //Log.e(\"isoffloaded\",\"*******************\"+dbH.isoffladedline());\r\n                    btndoneoffloading.setVisibility(View.VISIBLE);\r\n                }\r\n\r\n            }\r\n        });\r\n\r\n        final Handler handler = new Handler();\r\n        Runnable runnableNotify = new Runnable() {\r\n            private long startTime = System.currentTimeMillis();\r\n\r\n            public void run() {\r\n\r\n                while (dbH.NotificationTableHasData() > 0) {\r\n                    try {\r\n                        Thread.sleep(10000);\r\n                    } catch (InterruptedException e) {\r\n                        e.printStackTrace();\r\n                    }\r\n                    handler.post(new Runnable() {\r\n                        public void run() {\r\n                            ArrayList<OtherAttributes> dealLineToUpload = dbH.sendANotification();\r\n                            for (OtherAttributes orderAttributes : dealLineToUpload) {\r\n\r\n                                new UploadNotifications(orderAttributes.getMessages(), orderAttributes.getconDocId()).execute();\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        };\r\n        new Thread(runnableNotify).start();\r\n        checkunattitems.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n\r\n                if (!dbH.isoffladedline(InvoiceNo)) {\r\n                    final Dialog dialog = new Dialog(InvoiceDetails.this, android.R.style.Theme_Material_Light_NoActionBar_Fullscreen);\r\n                    dialog.setContentView(R.layout.summarry);\r\n\r\n                    dialog.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);\r\n\r\n                    ArrayList<OrderLines> oD = dbH.returnOrderLinesoffloaded(InvoiceNo);\r\n                    items2 = new ArrayList<Item>();\r\n                    items2Checked = new ArrayList<Item>();\r\n\r\n                    for (OrderLines orderAttributes : oD) {\r\n\r\n                        Log.e(\"ontheitem\", \"////////////////////////////\" + orderAttributes.getblnoffloaded());\r\n\r\n                        if (orderAttributes.getblnoffloaded() == \"0\") {\r\n                            Item item = new Item(orderAttributes.getPastelDescription(), orderAttributes.getPrice(), orderAttributes.getQty(),\r\n                                    \"\", \"1\", \"Lines\", orderAttributes.getblnoffloaded(), orderAttributes.getOrderDetailId());\r\n                            items2.add(item);\r\n                        }\r\n                        if (orderAttributes.getblnoffloaded() == \"1\") {\r\n                            Item item = new Item(orderAttributes.getPastelDescription(), orderAttributes.getPrice(), orderAttributes.getQty(),\r\n                                    \"\", \"1\", \"Lines\", orderAttributes.getblnoffloaded(), orderAttributes.getOrderDetailId());\r\n                            items2Checked.add(item);\r\n                        }\r\n\r\n\r\n                    }\r\n\r\n                    myItemsListAdapter2 = new ItemsListAdapter(InvoiceDetails.this, items2);\r\n                    myItemsListAdapter2Checked = new ItemsListAdapter(InvoiceDetails.this, items2Checked);\r\n                    listviewsummary = (ListView) dialog.findViewById(R.id._orderdlistlines);\r\n\r\n                    invoice_nosummary = (TextView) dialog.findViewById(R.id.invoice_no);\r\n                    closelinessummary = (Button) dialog.findViewById(R.id.closelines);\r\n                    acceptthesummary = (Button) dialog.findViewById(R.id.acceptthesummary);\r\n                    listviewsummary.setAdapter(myItemsListAdapter2);\r\n                    closelinessummary.setOnClickListener(new View.OnClickListener() {\r\n                        @Override\r\n                        public void onClick(View v) {\r\n                            dialog.dismiss();\r\n                        }\r\n                    });\r\n                    acceptthesummary.setOnClickListener(new View.OnClickListener() {\r\n                        @Override\r\n                        public void onClick(View v) {\r\n                            Log.e(\"this\", \"++++++++++++++++++++++++++++++++++++****************************l\");\r\n                            Intent b = new Intent(InvoiceDetails.this, InvoiceDetails.class);\r\n                            b.putExtra(\"deldate\", deldate);\r\n                            b.putExtra(\"routes\", route);\r\n                            b.putExtra(\"ordertype\", ordertype);\r\n                            b.putExtra(\"invoiceno\", InvoiceNo);\r\n                            b.putExtra(\"cash\", cash.getText().toString());\r\n                            startActivity(b);\r\n                        }\r\n                    });\r\n                    listviewsummary.setOnItemLongClickListener(new AdapterView.OnItemLongClickListener() {\r\n                        @Override\r\n                        public boolean onItemLongClick(AdapterView<?> parent, View view, int position, long id) {\r\n\r\n                            final Item selectedItem_line = (Item) (parent.getItemAtPosition(position));\r\n\r\n                            Intent lineEdit = new Intent(InvoiceDetails.this, LineEdit.class);\r\n\r\n                            lineEdit.putExtra(\"deldate\", deldate);\r\n                            lineEdit.putExtra(\"routes\", route);\r\n                            lineEdit.putExtra(\"ordertype\", ordertype);\r\n                            lineEdit.putExtra(\"orderdetailId\", selectedItem_line.ItemString8);\r\n                            lineEdit.putExtra(\"invoiceno\", InvoiceNo);\r\n                            startActivity(lineEdit);\r\n                            return true;\r\n                        }\r\n                    });\r\n                    dialog.show();\r\n                } else {\r\n                    Toast.makeText(getApplicationContext(), \"You have attended all the Items \",\r\n                            Toast.LENGTH_LONG).show();\r\n                }\r\n\r\n                //checkAndUncheck(list.get(position).ItemString6, cb.isChecked(),list.get(position).ItemString8);\r\n            }\r\n        });\r\n\r\n        cancel_order.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                //\r\n                final Dialog dialogView = new Dialog(InvoiceDetails.this, android.R.style.Theme_Material_Light_NoActionBar_Fullscreen);\r\n                dialogView.setContentView(R.layout.cancel_order_dialog);\r\n      /*  TextView textView = new TextView(context);\r\n        textView.setText();*/\r\n                dialogView.setTitle(\"Are you sure the customer is cancelling this order ?Please give a reason why.\");\r\n                dialogView.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);\r\n\r\n                final EditText editText = (EditText) dialogView.findViewById(R.id.edt_comment);\r\n                Button button1 = (Button) dialogView.findViewById(R.id.buttonSubmit);\r\n                Button button2 = (Button) dialogView.findViewById(R.id.buttonCancel);\r\n\r\n                button2.setOnClickListener(new View.OnClickListener() {\r\n                    @Override\r\n                    public void onClick(View view) {\r\n                        dialogView.dismiss();\r\n                    }\r\n                });\r\n                button1.setOnClickListener(new View.OnClickListener() {\r\n                    @Override\r\n                    public void onClick(View view) {\r\n                        // DO SOMETHINGS\r\n                        ArrayList<OrderLines> oD = dbH.returnOrderLinesoffloaded(InvoiceNo);\r\n\r\n                        for (OrderLines orderAttributes : oD) {\r\n\r\n                            dbH.updateDeals(\"Update OrderLines set blnoffloaded=1,Uploaded=0 , offLoadComment='CANCELLED' , returnQty =\" + orderAttributes.getQty() + \", strCustomerReason ='\" + editText.getText().toString() + \"'   where OrderDetailId = \" + Integer.parseInt(orderAttributes.getOrderDetailId()));\r\n\r\n                        }\r\n                        //\r\n                        Long tsLong = System.currentTimeMillis() / 1000;\r\n                        String ts = tsLong.toString();\r\n                        String subscriberId = android.provider.Settings.Secure.getString(getContentResolver(), android.provider.Settings.Secure.ANDROID_ID);\r\n                        final String idTimestamp = subscriberId + \"-\" + ts;\r\n\r\n                        String message = InvoiceNo + \" CANCELLED \" + editText.getText().toString();\r\n                        dbH.InserMessage(idTimestamp, message);\r\n                        Intent b = new Intent(InvoiceDetails.this, InvoiceDetails.class);\r\n                        b.putExtra(\"deldate\", deldate);\r\n                        b.putExtra(\"routes\", route);\r\n                        b.putExtra(\"ordertype\", ordertype);\r\n                        b.putExtra(\"invoiceno\", InvoiceNo);\r\n                        b.putExtra(\"cash\", cash.getText().toString());\r\n                        startActivity(b);\r\n                    }\r\n                });\r\n\r\n                //dialogView.setView(dialogView);\r\n                dialogView.show();\r\n            }\r\n        });\r\n\r\n\r\n    }\r\n\r\n    @Override\r\n    public boolean onKeyDown(int keyCode, KeyEvent event) {\r\n        if (keyCode == KeyEvent.KEYCODE_BACK)\r\n            Toast.makeText(getApplicationContext(), \"back press\",\r\n                    Toast.LENGTH_LONG).show();\r\n\r\n        return false;\r\n        // Disable back button..............\r\n    }\r\n\r\n    public static boolean containsIgnoreCase(String str, char c) {\r\n        str = str.toLowerCase();\r\n\r\n        for (int i = 0; i < str.length(); i++) {\r\n            if (str.charAt(i) == Character.toLowerCase(c)) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public boolean isFilePresent(String fileName) {\r\n        String path = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_MOVIES) + \"/\" + fileName;\r\n        File file = new File(path);\r\n        return file.exists();\r\n    }\r\n\r\n    public void checkAndUncheck(String tableName, boolean status, String detaild) {\r\n        if (tableName.equals(\"Lines\")) {\r\n            Log.e(\"sql\", \"checkbox*******\" + \"Update OrderLines set blnoffloaded=\" + status + \" Where OrderDetailId=\" + detaild);\r\n\r\n            if (status) {\r\n                dbH.updateDeals(\"Update OrderLines set blnoffloaded=1,Uploaded=0 Where OrderDetailId=\" + detaild);\r\n            } else {\r\n                dbH.updateDeals(\"Update OrderLines set blnoffloaded=0,Uploaded=0 Where OrderDetailId=\" + detaild);\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    public File getAlbumStorageDir(String albumName) {\r\n        // Get the directory for the user's public pictures directory.\r\n        File file = new File(Environment.getExternalStoragePublicDirectory(\r\n                Environment.DIRECTORY_PICTURES), albumName);\r\n        if (!file.mkdirs()) {\r\n            Log.e(\"SignaturePad\", \"Directory not created\");\r\n        }\r\n        return file;\r\n    }\r\n\r\n\r\n    public void saveBitmapToJPG(Bitmap bitmap, File photo, String InvoiceNo) throws IOException {\r\n        Bitmap newBitmap = Bitmap.createBitmap(bitmap.getWidth(), bitmap.getHeight(), Bitmap.Config.ARGB_8888);\r\n        Canvas canvas = new Canvas(newBitmap);\r\n        canvas.drawColor(Color.WHITE);\r\n        canvas.drawBitmap(bitmap, 0, 0, null);\r\n        //  OutputStream stream = new FileOutputStream(photo);\r\n        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\r\n        //newBitmap.compress(Bitmap.CompressFormat.JPEG, 80, stream);\r\n        bitmap.compress(Bitmap.CompressFormat.JPEG, 100, outputStream);\r\n        byte[] byteImage = outputStream.toByteArray();\r\n        String s = Base64.encodeToString(byteImage, Base64.DEFAULT);\r\n\r\n\r\n        dbH.updateDeals(\"Update OrderHeaders set imagestring='\" + s + \"' where InvoiceNo ='\" + InvoiceNo + \"'\");\r\n        // Log.e(\"********\",\"***************\"+s);\r\n        //Log.e(\"********\",\"***************InvoiceNo----\"+InvoiceNo);\r\n        //stream.close();\r\n    }\r\n\r\n    public void saveBitmapCash(Bitmap bitmap, String InvoiceNo) throws IOException {\r\n        Bitmap newBitmap = Bitmap.createBitmap(bitmap.getWidth(), bitmap.getHeight(), Bitmap.Config.ARGB_8888);\r\n        Canvas canvas = new Canvas(newBitmap);\r\n        canvas.drawColor(Color.WHITE);\r\n        canvas.drawBitmap(bitmap, 0, 0, null);\r\n        //  OutputStream stream = new FileOutputStream(photo);\r\n        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\r\n        //newBitmap.compress(Bitmap.CompressFormat.JPEG, 80, stream);\r\n        bitmap.compress(Bitmap.CompressFormat.JPEG, 100, outputStream);\r\n        byte[] byteImage = outputStream.toByteArray();\r\n        String s = Base64.encodeToString(byteImage, Base64.DEFAULT);\r\n\r\n        dbH.updateDeals(\"Update OrderHeaders set strCashsignature='\" + s + \"' where InvoiceNo ='\" + InvoiceNo + \"'\");\r\n        // Log.e(\"********\",\"***************\"+s);\r\n        //Log.e(\"********\",\"***************InvoiceNo----\"+InvoiceNo);\r\n        //stream.close();\r\n    }\r\n\r\n    public boolean addJpgSignatureToGallery(Bitmap signature, String invoiceNo) {\r\n        boolean result = false;\r\n        try {\r\n            File photo = new File(getAlbumStorageDir(\"SignaturePad\"), String.format(\"Signature_%d.jpg\", System.currentTimeMillis()));\r\n            saveBitmapToJPG(signature, photo, invoiceNo);\r\n            scanMediaFile(photo);\r\n            result = true;\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return result;\r\n    }\r\n\r\n    public boolean addSignatureJpg(Bitmap signature, String invoiceNo) {\r\n        boolean result = false;\r\n        try {\r\n            //   File photo = new File(getAlbumStorageDir(\"SignaturePad\"), String.format(\"Signature_%d.jpg\", System.currentTimeMillis()));\r\n            saveBitmapCash(signature, invoiceNo);\r\n            //scanMediaFile(photo);\r\n            result = true;\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return result;\r\n    }\r\n\r\n    private void scanMediaFile(File photo) {\r\n        Intent mediaScanIntent = new Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE);\r\n        Uri contentUri = Uri.fromFile(photo);\r\n        mediaScanIntent.setData(contentUri);\r\n        InvoiceDetails.this.sendBroadcast(mediaScanIntent);\r\n    }\r\n\r\n    public boolean addSvgSignatureToGallery(String signatureSvg) {\r\n        boolean result = false;\r\n        try {\r\n            File svgFile = new File(getAlbumStorageDir(\"SignaturePad\"), String.format(\"Signature_%d.svg\", System.currentTimeMillis()));\r\n            OutputStream stream = new FileOutputStream(svgFile);\r\n            OutputStreamWriter writer = new OutputStreamWriter(stream);\r\n            writer.write(signatureSvg);\r\n            writer.close();\r\n            stream.flush();\r\n            stream.close();\r\n            scanMediaFile(svgFile);\r\n            result = true;\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return result;\r\n    }\r\n\r\n    @Override\r\n    public void onClick(View v) {\r\n        // handle number button click\r\n        Log.e(\"clicked\", \"Button clicked*****************************\");\r\n        if (v.getTag() != null && \"number_button\".equals(v.getTag())) {\r\n            cashfielddialog.append(((TextView) v).getText());\r\n            return;\r\n        }\r\n        switch (v.getId()) {\r\n           /* case R.id.t9_key_clear: { // handle clear button\r\n                mPasswordField.setText(null);\r\n            }\r\n            break;*/\r\n            case R.id.t9_key_backspace: { // handle backspace button\r\n                // delete one character\r\n                Editable editable = cashfielddialog.getText();\r\n                int charCount = editable.length();\r\n                if (charCount > 0) {\r\n                    editable.delete(charCount - 1, charCount);\r\n                }\r\n            }\r\n\r\n            break;\r\n        }\r\n    }\r\n\r\n    private void setPairedDevices() {\r\n        bondedDevices.clear();\r\n\r\n        BluetoothAdapter bluetoothAdapter = BluetoothAdapter.getDefaultAdapter();\r\n        if (ActivityCompat.checkSelfPermission(this, Manifest.permission.BLUETOOTH_CONNECT) != PackageManager.PERMISSION_GRANTED) {\r\n            // TODO: Consider calling\r\n            //    ActivityCompat#requestPermissions\r\n            // here to request the missing permissions, and then overriding\r\n            //   public void onRequestPermissionsResult(int requestCode, String[] permissions,\r\n            //                                          int[] grantResults)\r\n            // to handle the case where the user grants the permission. See the documentation\r\n            // for ActivityCompat#requestPermissions for more details.\r\n            return;\r\n        }\r\n        Set<BluetoothDevice> bondedDeviceSet = bluetoothAdapter.getBondedDevices();\r\n\r\n        for (BluetoothDevice device : bondedDeviceSet) {\r\n            bondedDevices.add(device.getName() + DEVICE_ADDRESS_START + device.getAddress() + DEVICE_ADDRESS_END);\r\n        }\r\n\r\n        if (arrayAdapter != null) {\r\n            arrayAdapter.notifyDataSetChanged();\r\n        }\r\n    }\r\n\r\n    private boolean removeItemToList(List<Item> l, Item it) {\r\n        boolean result = l.remove(it);\r\n        return result;\r\n    }\r\n\r\n    private boolean addItemToList(List<Item> l, Item it) {\r\n        boolean result = l.add(it);\r\n        return result;\r\n    }\r\n\r\n    private void saveImage(Bitmap finalBitmap, String invoiceNo) {\r\n\r\n        String root = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_MOVIES) + \"\";\r\n        File myDir = new File(root + \"/saved_images\");\r\n        myDir.mkdirs();\r\n\r\n        String fname = invoiceNo + \".jpg\";\r\n\r\n        File file = new File(myDir, fname);\r\n        if (file.exists()) file.delete();\r\n        try {\r\n            FileOutputStream out = new FileOutputStream(file);\r\n            finalBitmap.compress(Bitmap.CompressFormat.JPEG, 100, out);\r\n            out.flush();\r\n            out.close();\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    private class searchBLEPrinterTask extends AsyncTask<Integer, Integer, Set<BluetoothDevice>> {\r\n        private String message;\r\n\r\n        @Override\r\n        protected void onPreExecute() {\r\n        }\r\n\r\n        @Override\r\n        protected void onPostExecute(Set<BluetoothDevice> bluetoothDeviceSet) {\r\n            bondedDevices.clear();\r\n\r\n            if (bluetoothDeviceSet.size() > 0) {\r\n                for (BluetoothDevice device : bluetoothDeviceSet) {\r\n                    if (ActivityCompat.checkSelfPermission(InvoiceDetails.this, Manifest.permission.BLUETOOTH_CONNECT) != PackageManager.PERMISSION_GRANTED) {\r\n                        // TODO: Consider calling\r\n                        //    ActivityCompat#requestPermissions\r\n                        // here to request the missing permissions, and then overriding\r\n                        //   public void onRequestPermissionsResult(int requestCode, String[] permissions,\r\n                        //                                          int[] grantResults)\r\n                        // to handle the case where the user grants the permission. See the documentation\r\n                        // for ActivityCompat#requestPermissions for more details.\r\n                        return;\r\n                    }\r\n                    bondedDevices.add(device.getName() + DEVICE_ADDRESS_START + device.getAddress() + DEVICE_ADDRESS_END);\r\n                }\r\n            } else {\r\n                Toast.makeText(getApplicationContext(), \"Can't found BLE devices. \", Toast.LENGTH_SHORT).show();\r\n            }\r\n\r\n            if (arrayAdapter != null) {\r\n                arrayAdapter.notifyDataSetChanged();\r\n            }\r\n\r\n            if (message != null) {\r\n                Toast.makeText(getApplicationContext(), message, Toast.LENGTH_SHORT).show();\r\n            }\r\n\r\n\r\n        }\r\n\r\n        @Override\r\n        protected Set<BluetoothDevice> doInBackground(Integer... params) {\r\n            try {\r\n                return BXLBluetoothLE.getBLEPrinters(InvoiceDetails.this, BXLBluetoothLE.SEARCH_BLE_ALWAYS);\r\n            } catch (NumberFormatException | JposException e) {\r\n                message = e.getMessage();\r\n                return new HashSet<>();\r\n            }\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onConnected(Bundle bundle) {\r\n        if (ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {\r\n            // TODO: Consider calling\r\n            //    ActivityCompat#requestPermissions\r\n            // here to request the missing permissions, and then overriding\r\n            //   public void onRequestPermissionsResult(int requestCode, String[] permissions,\r\n            //                                          int[] grantResults)\r\n            // to handle the case where the user grants the permission. See the documentation\r\n            // for ActivityCompat#requestPermissions for more details.\r\n            return;\r\n        }\r\n\r\n        startLocationUpdates();\r\n\r\n        mLocation = LocationServices.FusedLocationApi.getLastLocation(mGoogleApiClient);\r\n\r\n        if (mLocation == null) {\r\n            startLocationUpdates();\r\n        }\r\n        if (mLocation != null) {\r\n\r\n            // mLatitudeTextView.setText(String.valueOf(mLocation.getLatitude()));\r\n            //mLongitudeTextView.setText(String.valueOf(mLocation.getLongitude()));\r\n        } else {\r\n            Toast.makeText(this, \"Location not Detected\", Toast.LENGTH_SHORT).show();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onConnectionSuspended(int i) {\r\n        Log.i(TAG, \"Connection Suspended\");\r\n        mGoogleApiClient.connect();\r\n    }\r\n\r\n    @Override\r\n    public void onConnectionFailed(ConnectionResult connectionResult) {\r\n        Log.i(TAG, \"Connection failed. Error: \" + connectionResult.getErrorCode());\r\n    }\r\n\r\n    @Override\r\n    protected void onStart() {\r\n        super.onStart();\r\n        if (mGoogleApiClient != null) {\r\n            mGoogleApiClient.connect();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    protected void onStop() {\r\n        super.onStop();\r\n        if (mGoogleApiClient.isConnected()) {\r\n            mGoogleApiClient.disconnect();\r\n        }\r\n    }\r\n\r\n    protected void startLocationUpdates() {\r\n        // Create the location request\r\n        mLocationRequest = LocationRequest.create()\r\n                .setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY)\r\n                .setInterval(UPDATE_INTERVAL)\r\n                .setFastestInterval(FASTEST_INTERVAL);\r\n        // Request location updates\r\n        if (ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {\r\n            // TODO: Consider calling\r\n            //    ActivityCompat#requestPermissions\r\n            // here to request the missing permissions, and then overriding\r\n            //   public void onRequestPermissionsResult(int requestCode, String[] permissions,\r\n            //                                          int[] grantResults)\r\n            // to handle the case where the user grants the permission. See the documentation\r\n            // for ActivityCompat#requestPermissions for more details.\r\n            return;\r\n        }\r\n        LocationServices.FusedLocationApi.requestLocationUpdates(mGoogleApiClient,\r\n                mLocationRequest, this);\r\n        Log.d(\"reque\", \"--->>>>\");\r\n    }\r\n\r\n    @Override\r\n    public void onLocationChanged(Location location) {\r\n\r\n        String msg = \"Updated Location: \" +\r\n                Double.toString(location.getLatitude()) + \",\" +\r\n                Double.toString(location.getLongitude());\r\n        lat = location.getLatitude();\r\n        lon = location.getLongitude();\r\n        // mLatitudeTextView.setText(String.valueOf(location.getLatitude()));\r\n        //  mLongitudeTextView.setText(String.valueOf(location.getLongitude() ));\r\n        //   Toast.makeText(this, msg, Toast.LENGTH_SHORT).show();\r\n        // You can now create a LatLng Object for use with maps\r\n        currentlocation.setText(Double.toString(location.getLatitude()) + \",\" +\r\n                Double.toString(location.getLongitude()));\r\n        LatLng latLng = new LatLng(location.getLatitude(), location.getLongitude());\r\n    }\r\n\r\n    private boolean checkLocation() {\r\n        if (!isLocationEnabled())\r\n            showAlert();\r\n        return isLocationEnabled();\r\n    }\r\n\r\n    private void showAlert() {\r\n        final AlertDialog.Builder dialog = new AlertDialog.Builder(this);\r\n        dialog.setTitle(\"Enable Location\")\r\n                .setMessage(\"Your Locations Settings is set to 'Off'.\\nPlease Enable Location to \" +\r\n                        \"use this app\")\r\n                .setPositiveButton(\"Location Settings\", new DialogInterface.OnClickListener() {\r\n                    @Override\r\n                    public void onClick(DialogInterface paramDialogInterface, int paramInt) {\r\n\r\n                        Intent myIntent = new Intent(Settings.ACTION_LOCATION_SOURCE_SETTINGS);\r\n                        startActivity(myIntent);\r\n                    }\r\n                })\r\n                .setNegativeButton(\"Cancel\", new DialogInterface.OnClickListener() {\r\n                    @Override\r\n                    public void onClick(DialogInterface paramDialogInterface, int paramInt) {\r\n\r\n                    }\r\n                });\r\n        dialog.show();\r\n    }\r\n\r\n    private boolean isLocationEnabled() {\r\n        locationManager = (LocationManager) getSystemService(Context.LOCATION_SERVICE);\r\n        return locationManager.isProviderEnabled(LocationManager.GPS_PROVIDER) ||\r\n                locationManager.isProviderEnabled(LocationManager.NETWORK_PROVIDER);\r\n    }\r\n\r\n    private class UploadNotifications extends AsyncTask<Void, Void, Void> {\r\n        String mess;\r\n        String tabledId;\r\n\r\n\r\n        @Override\r\n        protected void onPostExecute(Void aVoid) {\r\n            super.onPostExecute(aVoid);\r\n\r\n        }\r\n\r\n        public UploadNotifications(String mess, String tabledId) {\r\n            this.mess = mess;\r\n            this.tabledId = tabledId;\r\n\r\n        }\r\n\r\n\r\n        @Override\r\n        protected Void doInBackground(Void... params) {\r\n            HttpClient httpclient = new DefaultHttpClient();\r\n\r\n            //dbCreation();\r\n            //}\r\n            HttpPost httppost = new HttpPost(SERVERIP + \"sendMessage.php\");\r\n            try {\r\n                // Add your data\r\n\r\n                JSONObject json = new JSONObject();\r\n                json.put(\"mess\", mess);\r\n                json.put(\"ids\", tabledId);\r\n\r\n\r\n                Log.d(\"JSON\", json.toString());\r\n                List nameValuePairs = new ArrayList(1);\r\n                nameValuePairs.add(new BasicNameValuePair(\"json\", json.toString()));\r\n\r\n                httppost.setEntity(new UrlEncodedFormEntity(nameValuePairs));\r\n\r\n                // Execute HTTP Post Request\r\n                HttpResponse response = httpclient.execute(httppost);\r\n                String responseBody = EntityUtils.toString(response.getEntity());\r\n                Log.e(\"JSON-*\", \"RESPONSE is lines**: \" + responseBody);\r\n                JSONArray BoardInfo = new JSONArray(responseBody);\r\n\r\n                for (int j = 0; j < BoardInfo.length(); ++j) {\r\n\r\n                    JSONObject BoardDetails = BoardInfo.getJSONObject(j);\r\n                    String ID, strPartNumber;\r\n                    ID = BoardDetails.getString(\"id\");\r\n\r\n                    Log.e(\"JSON-*\", \"RESPONSE is lines ID ********: \" + ID);\r\n                    dbH.updateDeals(\"Delete from  Notifications where TabletId = '\" + ID + \"'\");\r\n                }\r\n\r\n            } catch (ClientProtocolException e) {\r\n                Log.e(\"JSON\", e.getMessage());\r\n            } catch (IOException e) {\r\n                Log.e(\"JSON\", e.getMessage());\r\n            } catch (Exception e) {\r\n                Log.e(\"JSON\", e.getMessage());\r\n            }\r\n            // db.close();\r\n            return null;\r\n        }\r\n\r\n    }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/regin/reginald/vehicleanddrivers/InvoiceDetails.java b/app/src/main/java/com/regin/reginald/vehicleanddrivers/InvoiceDetails.java
--- a/app/src/main/java/com/regin/reginald/vehicleanddrivers/InvoiceDetails.java	
+++ b/app/src/main/java/com/regin/reginald/vehicleanddrivers/InvoiceDetails.java	
@@ -635,24 +635,25 @@
         }
 
 
-        ArrayList<OrderLines> oD = dbH.returnOrderLines(returndata.getStringExtra("invoiceno"));
+        //ArrayList<OrderLines> oD = dbH.returnOrderLines(returndata.getStringExtra("invoiceno"));
+        List<OrderLinesModel> oD = databaseAdapter.returnOrderLines(returndata.getStringExtra("invoiceno"));
         Log.e("Cas invoi", "****************************++++++++++++++++++++++++++++++++++++++++++++++++++++++" + returndata.getStringExtra("invoiceno"));
         items1 = new ArrayList<Item>();
         itemsChecked = new ArrayList<Item>();
 
-        for (OrderLines orderAttributes : oD) {
+        for (OrderLinesModel orderAttributes : oD) {
 
-            if (orderAttributes.getblnoffloaded().equals("0")) {
+            if (orderAttributes.getBlnoffloaded() == 0 ) {
 
-                Item item = new Item(orderAttributes.getPastelDescription(), orderAttributes.getPrice(), orderAttributes.getQty(),
-                        "", "Return: " + orderAttributes.getreturnQty(), "Lines", orderAttributes.getblnoffloaded(), orderAttributes.getOrderDetailId());
+                Item item = new Item(orderAttributes.getPastelDescription(), ""+orderAttributes.getPrice(), ""+orderAttributes.getQty(),
+                        "", "Return: " + orderAttributes.getReturnQty(), "Lines", ""+orderAttributes.getBlnoffloaded(), ""+orderAttributes.getOrderDetailId());
                 items1.add(item);
                 Log.e("items1", "" + items1);
             }
-            if (orderAttributes.getblnoffloaded().equals("1")) {
+            if (orderAttributes.getBlnoffloaded() == 1) {
 
-                Item item = new Item(orderAttributes.getPastelDescription(), orderAttributes.getPrice(), orderAttributes.getQty(),
-                        "", "Return: " + orderAttributes.getreturnQty(), "Lines", orderAttributes.getblnoffloaded(), orderAttributes.getOrderDetailId());
+                Item item = new Item(orderAttributes.getPastelDescription(), ""+orderAttributes.getPrice(), ""+orderAttributes.getQty(),
+                        "", "Return: " + orderAttributes.getReturnQty(), "Lines", ""+orderAttributes.getBlnoffloaded(), ""+orderAttributes.getOrderDetailId());
                 itemsChecked.add(item);
                 Log.e("itemsChecked", "" + itemsChecked);
             }
Index: app/src/main/java/com/regin/reginald/vehicleanddrivers/Aariyan/Networking/NetworkingFeedback.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.regin.reginald.vehicleanddrivers.Aariyan.Networking;\r\n\r\nimport android.util.Log;\r\n\r\nimport com.google.gson.Gson;\r\nimport com.regin.reginald.vehicleanddrivers.Aariyan.Database.DatabaseAdapter;\r\nimport com.regin.reginald.vehicleanddrivers.Aariyan.Interface.ApiClient;\r\nimport com.regin.reginald.vehicleanddrivers.Aariyan.Interface.GetOrderTypeInterface;\r\nimport com.regin.reginald.vehicleanddrivers.Aariyan.Interface.GetRouteInterface;\r\nimport com.regin.reginald.vehicleanddrivers.Aariyan.Interface.OrderListInterface;\r\nimport com.regin.reginald.vehicleanddrivers.Aariyan.Interface.RestApi;\r\nimport com.regin.reginald.vehicleanddrivers.Aariyan.Model.IpModel;\r\nimport com.regin.reginald.vehicleanddrivers.Aariyan.Model.OrderLinesModel;\r\nimport com.regin.reginald.vehicleanddrivers.Aariyan.Model.OrderModel;\r\nimport com.regin.reginald.vehicleanddrivers.Aariyan.Model.OrderTypeModel;\r\nimport com.regin.reginald.vehicleanddrivers.Aariyan.Model.RouteModel;\r\nimport com.regin.reginald.vehicleanddrivers.OrderLines;\r\n\r\nimport org.json.JSONArray;\r\nimport org.json.JSONObject;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport io.reactivex.rxjava3.android.schedulers.AndroidSchedulers;\r\nimport io.reactivex.rxjava3.annotations.NonNull;\r\nimport io.reactivex.rxjava3.core.Observable;\r\nimport io.reactivex.rxjava3.core.Observer;\r\nimport io.reactivex.rxjava3.core.Scheduler;\r\nimport io.reactivex.rxjava3.disposables.CompositeDisposable;\r\nimport io.reactivex.rxjava3.disposables.Disposable;\r\nimport io.reactivex.rxjava3.functions.Consumer;\r\nimport io.reactivex.rxjava3.schedulers.Schedulers;\r\nimport okhttp3.ResponseBody;\r\n\r\npublic class NetworkingFeedback {\r\n\r\n    private CompositeDisposable routeDisposable, orderDisposable, orderLinesDisposable;\r\n    private DatabaseAdapter databaseAdapter;\r\n    private RestApi apiService;\r\n\r\n    public NetworkingFeedback(DatabaseAdapter databaseAdapter) {\r\n        routeDisposable = new CompositeDisposable();\r\n        orderDisposable = new CompositeDisposable();\r\n        orderLinesDisposable = new CompositeDisposable();\r\n        this.databaseAdapter = databaseAdapter;\r\n    }\r\n\r\n\r\n    /**\r\n     * GET Route\r\n     */\r\n\r\n\r\n    public void getAvailableRoute(GetRouteInterface routeInterface) {\r\n        //check the table is exist or not:\r\n        List<RouteModel> routeList = databaseAdapter.getRoutes();\r\n        List<IpModel> serverIpModel = databaseAdapter.getServerIpModel();\r\n        if (routeList.size() > 0) { //Get it from Local storage if available:\r\n            routeInterface.gotRoute(routeList);\r\n            return;\r\n        } else { //else run the Network Call:\r\n            apiService = ApiClient.getClient(serverIpModel.get(0).getServerIp()).create(RestApi.class);\r\n            routeInterface.error(\"No route is available!, We are syncing route for you.\");\r\n            routeDisposable.add(apiService.getRoutes()\r\n                    .subscribeOn(Schedulers.io())\r\n                    .observeOn(AndroidSchedulers.mainThread())\r\n                    .subscribe(new Consumer<ResponseBody>() {\r\n                        @Override\r\n                        public void accept(ResponseBody responseBody) throws Throwable {\r\n                            JSONArray rootArray = new JSONArray(responseBody.string());\r\n                            routeList.clear();\r\n                            if (rootArray.length() > 0) {//If data found\r\n\r\n                                for (int i = 0; i < rootArray.length(); i++) {\r\n                                    JSONObject single = rootArray.getJSONObject(i);\r\n                                    int RouteId = single.getInt(\"RouteId\");\r\n                                    String RouteName = single.getString(\"RouteName\");\r\n\r\n                                    RouteModel model = new RouteModel(RouteId, RouteName);\r\n                                    routeList.add(model);\r\n                                }\r\n                                insertRouteIntoLocalStorage(routeList);\r\n                                routeInterface.gotRoute(routeList);\r\n\r\n                            } else {\r\n                                routeInterface.error(\"No Route Found!\");\r\n                            }\r\n                        }\r\n                    }, new Consumer<Throwable>() {\r\n                        @Override\r\n                        public void accept(Throwable throwable) throws Throwable {\r\n                            routeInterface.error(throwable.getMessage());\r\n                        }\r\n                    }));\r\n        }\r\n    }\r\n\r\n    //Insert Route into SQLite database:\r\n    private void insertRouteIntoLocalStorage(List<RouteModel> routeList) {\r\n        Observable<RouteModel> observable = Observable.fromIterable(routeList)\r\n                .subscribeOn(Schedulers.io());\r\n\r\n        Observer observer = new Observer() {\r\n            @Override\r\n            public void onSubscribe(@NonNull Disposable d) {\r\n                if (d.isDisposed()) {\r\n                    routeDisposable.clear();\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onNext(Object o) {\r\n                RouteModel routeModel = (RouteModel) o;\r\n                databaseAdapter.insertRoutes(routeModel.getRouteId(), routeModel.getRouteName());\r\n            }\r\n\r\n            @Override\r\n            public void onError(@NonNull Throwable e) {\r\n                Log.d(\"INSERT_ROUTE\", \"onError: \" + e.getMessage());\r\n            }\r\n\r\n            @Override\r\n            public void onComplete() {\r\n                Log.d(\"INSERT_ROUTE\", \"onComplete: Insert completed!\");\r\n            }\r\n        };\r\n\r\n        observable.subscribe(observer);\r\n    }\r\n\r\n    /**\r\n     * GET Order types\r\n     */\r\n\r\n    public void getAvailableOrder(GetOrderTypeInterface orderInterface, String subscriberId) {\r\n        //check the table is exist or not:\r\n        List<OrderTypeModel> orderList = databaseAdapter.getOrderTypes();\r\n        List<IpModel> serverIpModel = databaseAdapter.getServerIpModel();\r\n        if (orderList.size() > 2) { //Get it from Local storage if available:\r\n            orderInterface.gotOrderType(orderList);\r\n            return;\r\n        } else { //else run the Network Call:\r\n            apiService = ApiClient.getClient(serverIpModel.get(0).getServerIp()).create(RestApi.class);\r\n            orderInterface.error(\"No order is available!, We are syncing order for you.\");\r\n            routeDisposable.add(apiService.getOrderTypes(subscriberId)\r\n                    .subscribeOn(Schedulers.io())\r\n                    .observeOn(AndroidSchedulers.mainThread())\r\n                    .subscribe(new Consumer<ResponseBody>() {\r\n                        @Override\r\n                        public void accept(ResponseBody responseBody) throws Throwable {\r\n                            JSONArray rootArray = new JSONArray(responseBody.string());\r\n                            orderList.clear();\r\n                            if (rootArray.length() > 0) {//If data found\r\n\r\n                                for (int i = 0; i < rootArray.length(); i++) {\r\n                                    JSONObject single = rootArray.getJSONObject(i);\r\n                                    int OrderTypeId = single.getInt(\"OrderTypeId\");\r\n                                    String OrderType = single.getString(\"OrderType\");\r\n\r\n                                    OrderTypeModel model = new OrderTypeModel(OrderTypeId, OrderType);\r\n                                    orderList.add(model);\r\n                                }\r\n                                insertOrderIntoLocalStorage(orderList);\r\n                                orderInterface.gotOrderType(orderList);\r\n\r\n                            } else {\r\n                                orderInterface.error(\"No Order Found!\");\r\n                            }\r\n                        }\r\n                    }, new Consumer<Throwable>() {\r\n                        @Override\r\n                        public void accept(Throwable throwable) throws Throwable {\r\n                            orderInterface.error(throwable.getMessage());\r\n                        }\r\n                    }));\r\n        }\r\n    }\r\n\r\n    private void insertOrderIntoLocalStorage(List<OrderTypeModel> orderList) {\r\n\r\n        Observable<OrderTypeModel> observable = Observable.fromIterable(orderList)\r\n                .subscribeOn(Schedulers.io());\r\n\r\n        Observer observer = new Observer() {\r\n            @Override\r\n            public void onSubscribe(@NonNull Disposable d) {\r\n                if (d.isDisposed()) {\r\n                    routeDisposable.clear();\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onNext(Object o) {\r\n                OrderTypeModel orderModel = (OrderTypeModel) o;\r\n                databaseAdapter.insertOrderTypes(orderModel.getOrderTypeId(), orderModel.getOrderType());\r\n            }\r\n\r\n            @Override\r\n            public void onError(@NonNull Throwable e) {\r\n                Log.d(\"INSERT_ORDER\", \"onError: \" + e.getMessage());\r\n            }\r\n\r\n            @Override\r\n            public void onComplete() {\r\n                Log.d(\"INSERT_ORDER\", \"onComplete: Insert completed!\");\r\n            }\r\n        };\r\n\r\n        observable.subscribe(observer);\r\n    }\r\n\r\n    /**\r\n     * GET Available Orders:\r\n     */\r\n\r\n    public void getOrdersHeaders(OrderListInterface orderListInterface, String serverIp, String orderDate, int routeId, int orderId) {\r\n        List<OrderModel> listOfOrders = new ArrayList<>();\r\n\r\n        apiService = ApiClient.getClient(serverIp).create(RestApi.class);\r\n        //orderListInterface.onError(\"No order is available!\");\r\n        orderDisposable.add(apiService.getOrderHeaders(orderId, routeId, orderDate)\r\n                .subscribeOn(Schedulers.io())\r\n                .observeOn(AndroidSchedulers.mainThread())\r\n                .subscribe(new Consumer<ResponseBody>() {\r\n                    @Override\r\n                    public void accept(ResponseBody responseBody) throws Throwable {\r\n                        JSONArray rootArray = new JSONArray(responseBody.string());\r\n                        Log.d(\"RESPONSE_TESTING\", \"accept: server: \" + serverIp +\r\n                                \"\\n date: \" + orderDate + \"\\n route: \" + routeId + \"\\n order: \" + orderId +\r\n                                \"\\n Length: \" + rootArray.length());\r\n                        listOfOrders.clear();\r\n                        if (rootArray.length() > 0) {//If data found\r\n//                            Gson gson = new Gson();\r\n//                            OrderModel model = gson.fromJson(responseBody.string(), OrderModel.class);\r\n//                            listOfOrders.add(model);\r\n//                            insertOrderListIntoLocalStorage(listOfOrders);\r\n                            for (int i = 0; i < rootArray.length(); i++) {\r\n                                JSONObject single = rootArray.getJSONObject(i);\r\n\r\n                                int OrderId;\r\n                                if (single.has(\"OrderId\")) {\r\n                                    OrderId = single.getInt(\"OrderId\");\r\n                                } else {\r\n                                    OrderId = -1;\r\n                                }\r\n\r\n                                String InvoiceNo;\r\n                                if (single.has(\"InvoiceNo\")) {\r\n                                    InvoiceNo = single.getString(\"InvoiceNo\");\r\n                                } else {\r\n                                    InvoiceNo = \"No Invoice Found\";\r\n                                }\r\n\r\n                                String CustomerPastelCode;\r\n                                if (single.has(\"CustomerPastelCode\")) {\r\n                                    CustomerPastelCode = single.getString(\"CustomerPastelCode\");\r\n                                } else {\r\n                                    CustomerPastelCode = \"Customer Pastel Code Missing\";\r\n                                }\r\n\r\n                                String StoreName;\r\n                                if (single.has(\"StoreName\")) {\r\n                                    StoreName = single.getString(\"StoreName\");\r\n                                } else {\r\n                                    StoreName = \"Store Name Missing\";\r\n                                }\r\n\r\n                                String DeliveryDate;\r\n                                if (single.has(\"DeliveryDate\")) {\r\n                                    DeliveryDate = single.getString(\"DeliveryDate\");\r\n                                } else {\r\n                                    DeliveryDate = \"Date Missing\";\r\n                                }\r\n\r\n                                double Latitude;\r\n                                if (single.has(\"Latitude\")) {\r\n                                    Latitude = single.getDouble(\"Latitude\");\r\n                                } else {\r\n                                    Latitude = -777;\r\n                                }\r\n\r\n                                double Longitude;\r\n                                if (single.has(\"Longitude\")) {\r\n                                    Longitude = single.getDouble(\"Longitude\");\r\n                                } else {\r\n                                    Longitude = -777;\r\n                                }\r\n\r\n                                String OrderValueExc;\r\n                                if (single.has(\"OrderValueExc\")) {\r\n                                    OrderValueExc = single.getString(\"OrderValueExc\");\r\n                                } else {\r\n                                    OrderValueExc = \"Value Missing\";\r\n                                }\r\n\r\n                                String OrderValueInc;\r\n                                if (single.has(\"OrderValueInc\")) {\r\n                                    OrderValueInc = single.getString(\"OrderValueInc\");\r\n                                } else {\r\n                                    OrderValueInc = \"Value Missing\";\r\n                                }\r\n\r\n                                String DeliveryAddress;\r\n                                if (single.has(\"DeliveryAddress\")) {\r\n                                    DeliveryAddress = single.getString(\"DeliveryAddress\");\r\n                                } else {\r\n                                    DeliveryAddress = \"Value Missing\";\r\n                                }\r\n\r\n                                String User;\r\n                                if (single.has(\"User\")) {\r\n                                    User = single.getString(\"User\");\r\n                                } else {\r\n                                    User = \"Value Missing\";\r\n                                }\r\n\r\n                                String OrderMass;\r\n                                if (single.has(\"OrderMass\")) {\r\n                                    OrderMass = single.getString(\"OrderMass\");\r\n                                } else {\r\n                                    OrderMass = \"Value Missing\";\r\n                                }\r\n\r\n                                int Uploaded;\r\n                                if (single.has(\"Uploaded\")) {\r\n                                    Uploaded = single.getInt(\"Uploaded\");\r\n                                } else {\r\n                                    Uploaded = -777;\r\n                                }\r\n\r\n                                String CashPaid;\r\n                                if (single.has(\"CashPaid\")) {\r\n                                    CashPaid = single.getString(\"CashPaid\");\r\n                                } else {\r\n                                    CashPaid = \"Value Missing\";\r\n                                }\r\n\r\n                                int offloaded;\r\n                                if (single.has(\"offloaded\")) {\r\n                                    offloaded = single.getInt(\"offloaded\");\r\n                                } else {\r\n                                    offloaded = -777;\r\n                                }\r\n\r\n                                String strEmailCustomer;\r\n                                if (single.has(\"strEmailCustomer\")) {\r\n                                    strEmailCustomer = single.getString(\"strEmailCustomer\");\r\n                                } else {\r\n                                    strEmailCustomer = \"Value Missing\";\r\n                                }\r\n\r\n                                String strCashsignature;\r\n                                if (single.has(\"strCashsignature\")) {\r\n                                    strCashsignature = single.getString(\"strCashsignature\");\r\n                                } else {\r\n                                    strCashsignature = \"Value Missing\";\r\n                                }\r\n\r\n                                String InvTotIncl;\r\n                                if (single.has(\"InvTotIncl\")) {\r\n                                    InvTotIncl = single.getString(\"InvTotIncl\");\r\n                                } else {\r\n                                    InvTotIncl = \"Value Missing\";\r\n                                }\r\n\r\n                                String StartTripTime;\r\n                                if (single.has(\"StartTripTime\")) {\r\n                                    StartTripTime = single.getString(\"StartTripTime\");\r\n                                } else {\r\n                                    StartTripTime = \"Value Missing\";\r\n                                }\r\n\r\n                                String EndTripTime;\r\n                                if (single.has(\"EndTripTime\")) {\r\n                                    EndTripTime = single.getString(\"EndTripTime\");\r\n                                } else {\r\n                                    EndTripTime = \"Value Missing\";\r\n                                }\r\n\r\n                                int DeliverySeq;\r\n                                if (single.has(\"DeliverySeq\")) {\r\n                                    DeliverySeq = single.getInt(\"DeliverySeq\");\r\n                                } else {\r\n                                    DeliverySeq = -777;\r\n                                }\r\n\r\n                                String strCoordinateStart;\r\n                                if (single.has(\"strCoordinateStart\")) {\r\n                                    strCoordinateStart = single.getString(\"strCoordinateStart\");\r\n                                } else {\r\n                                    strCoordinateStart = \"Value Missing\";\r\n                                }\r\n\r\n                                String DriverName;\r\n                                if (single.has(\"DriverName\")) {\r\n                                    DriverName = single.getString(\"DriverName\");\r\n                                } else {\r\n                                    DriverName = \"Value Missing\";\r\n                                }\r\n\r\n                                String DriverEmail;\r\n                                if (single.has(\"DriverEmail\")) {\r\n                                    DriverEmail = single.getString(\"DriverEmail\");\r\n                                } else {\r\n                                    DriverEmail = \"Value Missing\";\r\n                                }\r\n\r\n                                String DriverPassword;\r\n                                if (single.has(\"DriverPassword\")) {\r\n                                    DriverPassword = single.getString(\"DriverPassword\");\r\n                                } else {\r\n                                    DriverPassword = \"Value Missing\";\r\n                                }\r\n\r\n                                String strCustomerSignedBy;\r\n                                if (single.has(\"strCustomerSignedBy\")) {\r\n                                    strCustomerSignedBy = single.getString(\"strCustomerSignedBy\");\r\n                                } else {\r\n                                    strCustomerSignedBy = \"Value Missing\";\r\n                                }\r\n\r\n                                String Threshold;\r\n                                if (single.has(\"Threshold\")) {\r\n                                    Threshold = single.getString(\"Threshold\");\r\n                                } else {\r\n                                    Threshold = \"Value Missing\";\r\n                                }\r\n\r\n                                listOfOrders.add(new OrderModel(\r\n                                        OrderId,\r\n                                        InvoiceNo,\r\n                                        CustomerPastelCode,\r\n                                        StoreName,\r\n                                        DeliveryDate,\r\n                                        Latitude,\r\n                                        Longitude,\r\n                                        OrderValueExc,\r\n                                        OrderValueInc,\r\n                                        DeliveryAddress,\r\n                                        User,\r\n                                        OrderMass,\r\n                                        Uploaded,\r\n                                        CashPaid,\r\n                                        offloaded,\r\n                                        strEmailCustomer,\r\n                                        strCashsignature,\r\n                                        InvTotIncl,\r\n                                        StartTripTime,\r\n                                        EndTripTime,\r\n                                        DeliverySeq,\r\n                                        strCoordinateStart,\r\n                                        DriverName,\r\n                                        DriverEmail,\r\n                                        DriverPassword,\r\n                                        strCustomerSignedBy,\r\n                                        Threshold\r\n                                ));\r\n\r\n\r\n                                Log.d(\"RESPONSE_TESTING\", \"accept: \" + single.getInt(\"OrderId\"));\r\n                            }\r\n                            orderListInterface.gotOrders(listOfOrders);\r\n                            insertOrdersIntoSQLiteDatabase(listOfOrders);\r\n\r\n                            //Fetching the Orders Lines:\r\n                            getOrderLines(serverIp, orderDate, routeId, orderId);\r\n\r\n                            Log.d(\"RESPONSE_TESTING\", \"Inner: \" + rootArray);\r\n\r\n                        } else {\r\n                            orderListInterface.onError(\"No Order Found!\");\r\n                        }\r\n                    }\r\n                }, new Consumer<Throwable>() {\r\n                    @Override\r\n                    public void accept(Throwable throwable) throws Throwable {\r\n                        orderListInterface.onError(throwable.getMessage());\r\n                        Log.d(\"RESPONSE_TESTING\", \"exception: \" + throwable.getMessage());\r\n                    }\r\n                }));\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * GET Order lines\r\n     */\r\n\r\n    public void getOrderLines(String serverIp, String orderDate, int routeId, int orderId) {\r\n        List<OrderLinesModel> orderLinesList = new ArrayList<>();\r\n\r\n        apiService = ApiClient.getClient(serverIp).create(RestApi.class);\r\n        //orderListInterface.onError(\"No order is available!\");\r\n        orderLinesDisposable.add(apiService.getOrderLines(orderId, routeId, orderDate)\r\n                .subscribeOn(Schedulers.io())\r\n                .observeOn(AndroidSchedulers.mainThread())\r\n                .subscribe(new Consumer<ResponseBody>() {\r\n                    @Override\r\n                    public void accept(ResponseBody responseBody) throws Throwable {\r\n                        JSONArray rootArray = new JSONArray(responseBody.string());\r\n                        Log.d(\"RESPONSE_TESTING\", \"accept: server: \" + serverIp +\r\n                                \"\\n date: \" + orderDate + \"\\n route: \" + routeId + \"\\n order: \" + orderId +\r\n                                \"\\n Length: \" + rootArray.length());\r\n                        orderLinesList.clear();\r\n                        if (rootArray.length() > 0) {//If data found\r\n//                            Gson gson = new Gson();\r\n//                            OrderModel model = gson.fromJson(responseBody.string(), OrderModel.class);\r\n//                            listOfOrders.add(model);\r\n//                            insertOrderListIntoLocalStorage(listOfOrders);\r\n                            for (int i = 0; i < rootArray.length(); i++) {\r\n                                JSONObject single = rootArray.getJSONObject(i);\r\n\r\n                                String OrderId;\r\n                                if (single.has(\"OrderId\")) {\r\n                                    OrderId = single.getString(\"OrderId\");\r\n                                } else {\r\n                                    OrderId = \"Value Missing\";\r\n                                }\r\n\r\n                                String InvoiceNo;\r\n                                if (single.has(\"InvoiceNo\")) {\r\n                                    InvoiceNo = single.getString(\"InvoiceNo\");\r\n                                } else {\r\n                                    InvoiceNo = \"No Invoice Found\";\r\n                                }\r\n\r\n                                String CustomerPastelCode;\r\n                                if (single.has(\"CustomerPastelCode\")) {\r\n                                    CustomerPastelCode = single.getString(\"CustomerPastelCode\");\r\n                                } else {\r\n                                    CustomerPastelCode = \"Customer Pastel Code Missing\";\r\n                                }\r\n\r\n                                String StoreName;\r\n                                if (single.has(\"StoreName\")) {\r\n                                    StoreName = single.getString(\"StoreName\");\r\n                                } else {\r\n                                    StoreName = \"Store Name Missing\";\r\n                                }\r\n\r\n                                String DeliveryDate;\r\n                                if (single.has(\"DeliveryDate\")) {\r\n                                    DeliveryDate = single.getString(\"DeliveryDate\");\r\n                                } else {\r\n                                    DeliveryDate = \"Date Missing\";\r\n                                }\r\n\r\n                                double Latitude;\r\n                                if (single.has(\"Latitude\")) {\r\n                                    Latitude = single.getDouble(\"Latitude\");\r\n                                } else {\r\n                                    Latitude = -777;\r\n                                }\r\n\r\n                                double Longitude;\r\n                                if (single.has(\"Longitude\")) {\r\n                                    Longitude = single.getDouble(\"Longitude\");\r\n                                } else {\r\n                                    Longitude = -777;\r\n                                }\r\n\r\n                                double OrderValueExc;\r\n                                if (single.has(\"OrderValueExc\")) {\r\n                                    OrderValueExc = single.getDouble(\"OrderValueExc\");\r\n                                } else {\r\n                                    OrderValueExc = -0.0;\r\n                                }\r\n\r\n                                double OrderValueInc;\r\n                                if (single.has(\"OrderValueInc\")) {\r\n                                    OrderValueInc = single.getDouble(\"OrderValueInc\");\r\n                                } else {\r\n                                    OrderValueInc = -0.0;\r\n                                }\r\n\r\n                                String DeliveryAddress;\r\n                                if (single.has(\"DeliveryAddress\")) {\r\n                                    DeliveryAddress = single.getString(\"DeliveryAddress\");\r\n                                } else {\r\n                                    DeliveryAddress = \"Value Missing\";\r\n                                }\r\n\r\n                                String User;\r\n                                if (single.has(\"User\")) {\r\n                                    User = single.getString(\"User\");\r\n                                } else {\r\n                                    User = \"Value Missing\";\r\n                                }\r\n\r\n                                int OrderMass;\r\n                                if (single.has(\"OrderMass\")) {\r\n                                    OrderMass = single.getInt(\"OrderMass\");\r\n                                } else {\r\n                                    OrderMass = -777;\r\n                                }\r\n\r\n                                int ProductId;\r\n                                if (single.has(\"ProductId\")) {\r\n                                    ProductId = single.getInt(\"ProductId\");\r\n                                } else {\r\n                                    ProductId = -777;\r\n                                }\r\n\r\n                                int Qty;\r\n                                if (single.has(\"Qty\")) {\r\n                                    Qty = single.getInt(\"Qty\");\r\n                                } else {\r\n                                    Qty = -777;\r\n                                }\r\n\r\n                                double Price;\r\n                                if (single.has(\"Price\")) {\r\n                                    Price = single.getDouble(\"Price\");\r\n                                } else {\r\n                                    Price = -777;\r\n                                }\r\n\r\n                                String PastelDescription;\r\n                                if (single.has(\"PastelDescription\")) {\r\n                                    PastelDescription = single.getString(\"PastelDescription\");\r\n                                } else {\r\n                                    PastelDescription = \"Value Missing\";\r\n                                }\r\n\r\n\r\n                                String PastelCode;\r\n                                if (single.has(\"PastelCode\")) {\r\n                                    PastelCode = single.getString(\"PastelCode\");\r\n                                } else {\r\n                                    PastelCode = \"Value Missing\";\r\n                                }\r\n\r\n                                int OrderDetailId;\r\n                                if (single.has(\"OrderDetailId\")) {\r\n                                    OrderDetailId = single.getInt(\"OrderDetailId\");\r\n                                } else {\r\n                                    OrderDetailId = -777;\r\n                                }\r\n\r\n                                String Comment;\r\n                                if (single.has(\"Comment\")) {\r\n                                    Comment = single.getString(\"Comment\");\r\n                                } else {\r\n                                    Comment = \"Value Missing\";\r\n                                }\r\n\r\n                                String returnQty;\r\n                                if (single.has(\"returnQty\")) {\r\n                                    returnQty = single.getString(\"returnQty\");\r\n                                } else {\r\n                                    returnQty = \"Value Missing\";\r\n                                }\r\n\r\n                                String offLoadComment;\r\n                                if (single.has(\"offLoadComment\")) {\r\n                                    offLoadComment = single.getString(\"offLoadComment\");\r\n                                } else {\r\n                                    offLoadComment = \"Value Missing\";\r\n                                }\r\n\r\n                                int blnoffloaded;\r\n                                if (single.has(\"blnoffloaded\")) {\r\n                                    blnoffloaded = single.getInt(\"blnoffloaded\");\r\n                                } else {\r\n                                    blnoffloaded = -777;\r\n                                }\r\n\r\n                                String strCustomerReason;\r\n                                if (single.has(\"strCustomerReason\")) {\r\n                                    strCustomerReason = single.getString(\"strCustomerReason\");\r\n                                } else {\r\n                                    strCustomerReason = \"Value Missing\";\r\n                                }\r\n\r\n\r\n                                String intWareHouseId;\r\n                                if (single.has(\"intWareHouseId\")) {\r\n                                    intWareHouseId = single.getString(\"intWareHouseId\");\r\n                                } else {\r\n                                    intWareHouseId = \"Value Missing\";\r\n                                }\r\n\r\n                                String WareHouseName;\r\n                                if (single.has(\"WareHouseName\")) {\r\n                                    WareHouseName = single.getString(\"WareHouseName\");\r\n                                } else {\r\n                                    WareHouseName = \"Value Missing\";\r\n                                }\r\n\r\n\r\n                                orderLinesList.add(new OrderLinesModel(\r\n                                        OrderId,\r\n                                        InvoiceNo,\r\n                                        CustomerPastelCode,\r\n                                        StoreName,\r\n                                        DeliveryDate,\r\n                                        Latitude,\r\n                                        Longitude,\r\n                                        OrderValueExc,\r\n                                        OrderValueInc,\r\n                                        DeliveryAddress,\r\n                                        User,\r\n                                        OrderMass,\r\n                                        ProductId,\r\n                                        Qty,\r\n                                        Price,\r\n                                        PastelDescription,\r\n                                        PastelCode,\r\n                                        OrderDetailId,\r\n                                        Comment,\r\n                                        returnQty,\r\n                                        offLoadComment,\r\n                                        blnoffloaded,\r\n                                        strCustomerReason,\r\n                                        intWareHouseId,\r\n                                        WareHouseName\r\n                                ));\r\n\r\n\r\n                                Log.d(\"RESPONSE_TESTING\", \"accept: \" + single.getInt(\"OrderId\"));\r\n                            }\r\n                            insertOrderLinesIntoSQLiteDatabase(orderLinesList);\r\n\r\n                            //Fetching the Orders Lines:\r\n                            getOrderLines(serverIp, orderDate, routeId, orderId);\r\n\r\n                            Log.d(\"RESPONSE_TESTING\", \"Inner: \" + rootArray);\r\n\r\n                        } else {\r\n                        }\r\n                    }\r\n                }, new Consumer<Throwable>() {\r\n                    @Override\r\n                    public void accept(Throwable throwable) throws Throwable {\r\n                        Log.d(\"RESPONSE_TESTING\", \"exception: \" + throwable.getMessage());\r\n                    }\r\n                }));\r\n\r\n    }\r\n\r\n    private void insertOrderLinesIntoSQLiteDatabase(List<OrderLinesModel> orderLinesList) {\r\n\r\n        Observable<OrderLinesModel> observable = Observable.fromIterable(orderLinesList)\r\n                .subscribeOn(Schedulers.io());\r\n\r\n        Observer observer = new Observer() {\r\n            @Override\r\n            public void onSubscribe(@NonNull Disposable d) {\r\n                if (d.isDisposed()) {\r\n                    orderLinesDisposable.clear();\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onNext(Object o) {\r\n                OrderLinesModel model = (OrderLinesModel) o;\r\n                databaseAdapter.insertOrderLines(model);\r\n            }\r\n\r\n            @Override\r\n            public void onError(@NonNull Throwable e) {\r\n                Log.d(\"ORDER_LINES_ERROR\", \"onError: \" + e.getMessage());\r\n            }\r\n\r\n            @Override\r\n            public void onComplete() {\r\n                Log.d(\"ORDER_LINES_COMPLETED\", \"onComplete: \");\r\n            }\r\n        };\r\n\r\n        observable.subscribe(observer);\r\n    }\r\n\r\n\r\n    /**\r\n     * Insert order into SQLite database:\r\n     *\r\n     * @param listOfOrders\r\n     */\r\n    private void insertOrdersIntoSQLiteDatabase(List<OrderModel> listOfOrders) {\r\n        databaseAdapter.dropOrderTable();\r\n        Observable<OrderModel> observable = Observable.fromIterable(listOfOrders)\r\n                .subscribeOn(Schedulers.io());\r\n\r\n        Observer observer = new Observer() {\r\n            @Override\r\n            public void onSubscribe(@NonNull Disposable d) {\r\n                if (d.isDisposed()) {\r\n                    orderDisposable.clear();\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onNext(Object o) {\r\n                OrderModel model = (OrderModel) o;\r\n                databaseAdapter.insertOrders(model);\r\n            }\r\n\r\n            @Override\r\n            public void onError(@NonNull Throwable e) {\r\n                Log.d(\"INSERT_ERROR\", \"onError: \" + e.getMessage());\r\n            }\r\n\r\n            @Override\r\n            public void onComplete() {\r\n                Log.d(\"INSERT_COMPLETED\", \"onComplete: \");\r\n            }\r\n        };\r\n        observable.subscribe(observer);\r\n\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/regin/reginald/vehicleanddrivers/Aariyan/Networking/NetworkingFeedback.java b/app/src/main/java/com/regin/reginald/vehicleanddrivers/Aariyan/Networking/NetworkingFeedback.java
--- a/app/src/main/java/com/regin/reginald/vehicleanddrivers/Aariyan/Networking/NetworkingFeedback.java	
+++ b/app/src/main/java/com/regin/reginald/vehicleanddrivers/Aariyan/Networking/NetworkingFeedback.java	
@@ -489,7 +489,6 @@
 
     public void getOrderLines(String serverIp, String orderDate, int routeId, int orderId) {
         List<OrderLinesModel> orderLinesList = new ArrayList<>();
-
         apiService = ApiClient.getClient(serverIp).create(RestApi.class);
         //orderListInterface.onError("No order is available!");
         orderLinesDisposable.add(apiService.getOrderLines(orderId, routeId, orderDate)
@@ -718,12 +717,11 @@
                                 ));
 
 
-                                Log.d("RESPONSE_TESTING", "accept: " + single.getInt("OrderId"));
+                                //Log.d("RESPONSE_TESTING", "accept: " + single.getInt("OrderId"));
                             }
                             insertOrderLinesIntoSQLiteDatabase(orderLinesList);
-
                             //Fetching the Orders Lines:
-                            getOrderLines(serverIp, orderDate, routeId, orderId);
+                            //getOrderLines(serverIp, orderDate, routeId, orderId);
 
                             Log.d("RESPONSE_TESTING", "Inner: " + rootArray);
 
@@ -739,6 +737,13 @@
 
     }
 
+
+    //Get WareHouses
+    public void insertWarehouses() {
+
+    }
+
+
     private void insertOrderLinesIntoSQLiteDatabase(List<OrderLinesModel> orderLinesList) {
 
         Observable<OrderLinesModel> observable = Observable.fromIterable(orderLinesList)
